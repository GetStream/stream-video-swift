default_platform :ios
skip_docs

require 'json'
require 'net/http'
import 'Sonarfile'
import 'Allurefile'

xcode_version = ENV['XCODE_VERSION'] || '15.0'
xcode_project = 'StreamVideo.xcodeproj'
sdk_names = ['StreamVideo', 'StreamVideoSwiftUI', 'StreamVideoUIKit']
github_repo = ENV['GITHUB_REPOSITORY'] || 'GetStream/stream-video-swift'
sinatra_port = 4567
video_buddy_port = 5678
app_secret = ENV.fetch('STREAM_VIDEO_SECRET', nil)

before_all do |lane|
  if is_ci
    setup_ci
    ENV['FASTLANE_XCODEBUILD_SETTINGS_TIMEOUT'] = '180'
    xcversion(version: xcode_version) unless [:publish_release, :allure_launch, :allure_upload].include?(lane)
  elsif lane == :test_e2e
    clean_up_ports_for_e2e_test
  end
end

after_all do |lane|
  clean_up_ports_for_e2e_test if lane == :test_e2e
end

desc "Release a new version"
lane :release do |options|
  previous_version_number = last_git_tag
  swift_environment_path = File.absolute_path('../Sources/StreamVideo/Generated/SystemEnvironment+Version.swift')
  extra_changes = lambda do |release_version|
    # Set the framework version in SystemEnvironment+Version.swift
    new_content = File.read(swift_environment_path).gsub!(previous_version_number, release_version)
    File.open(swift_environment_path, 'w') { |f| f.puts(new_content) }
  end

  pod_lint
  version_number = release_ios_sdk(
    version: options[:version],
    bump_type: options[:type],
    sdk_names: sdk_names,
    github_repo: github_repo,
    extra_changes: extra_changes,
    create_pull_request: false
  )
  publish_release(version: version_number)
end

desc "Publish a new release to GitHub and CocoaPods"
lane :publish_release do |options|
  publish_ios_sdk(
    version: options[:version],
    sdk_names: sdk_names,
    github_repo: github_repo
  )
end

lane :pod_lint do
  # We don't lint StreamVideoSwiftUI and StreamVideoUIKit podspecs since pod lints them against StreamVideo's remote version instead of local one
  pod_lib_lint(podspec: 'StreamVideo.podspec', allow_warnings: true)
end

lane :match_me do |options|
  custom_match(
    api_key: appstore_api_key,
    app_identifier: [
      'io.getstream.iOS.VideoDemoApp',
      'io.getstream.iOS.DemoAppUIKit',
      'io.getstream.iOS.VideoDemoApp.CallIntent',
      'io.getstream.iOS.VideoDemoApp.ScreenSharing'
    ],
    readonly: options[:readonly],
    register_device: options[:register_device]
  )
end

lane :swiftui_testflight_build do
  upload_beta(app_target: 'DemoApp', app_identifier: 'io.getstream.iOS.VideoDemoApp')
end

lane :uikit_testflight_build do
  upload_beta(app_target: 'DemoAppUIKit', app_identifier: 'io.getstream.iOS.DemoAppUIKit')
end

private_lane :upload_beta do |options|
  match_me
  create_credentials_config
  testflight_build(
    api_key: appstore_api_key,
    xcode_project: xcode_project,
    sdk_target: 'StreamVideo',
    app_target: options[:app_target],
    app_identifier: options[:app_identifier],
    extensions: ['CallIntent', 'ScreenSharing']
  )
end

private_lane :appstore_api_key do
  @appstore_api_key ||= app_store_connect_api_key(
    key_id: 'MT3PRT8TB7',
    issuer_id: '69a6de96-0738-47e3-e053-5b8c7c11a4d1',
    key_content: ENV.fetch('APPSTORE_API_KEY', nil),
    in_house: false
  )
end

lane :create_credentials_config do
  # Make sure xcconfig exists even though it won't be used on CI
  sh('touch ../TestTools/Credentials.xcconfig')
end

desc 'Runs LLC tests'
lane :test do |options|
  next unless is_check_required(sources: sources_matrix[:unit])

  create_credentials_config

  testplan = 'StreamVideoAPITests'
  update_testplan_on_ci(path: "StreamVideoTests/#{testplan}.xctestplan")

  scan(
    project: xcode_project,
    scheme: 'StreamVideo',
    testplan: testplan,
    clean: true,
    devices: options[:device],
    number_of_retries: 2,
    xcargs: ENV['STREAM_VIDEO_SECRET'] ? "STREAM_VIDEO_SECRET=#{ENV['STREAM_VIDEO_SECRET']}" : ''
  )

  next if options[:api_tests_only]

  testplan = 'StreamVideo'
  update_testplan_on_ci(path: "StreamVideoTests/#{testplan}.xctestplan")

  scan(
    project: xcode_project,
    scheme: 'StreamVideo',
    testplan: testplan,
    devices: options[:device]
  )
end

desc 'Runs SwiftUI tests'
lane :test_swiftui do |options|
  test_ui(scheme: 'StreamVideoSwiftUI', source: :swiftui, device: options[:device], record: options[:record])
end

desc 'Runs UIKit tests'
lane :test_uikit do |options|
  test_ui(scheme: 'StreamVideoUIKit', source: :uikit, device: options[:device], record: options[:record])
end

private_lane :test_ui do |options|
  next unless is_check_required(sources: sources_matrix[options[:source]])

  remove_snapshots(scheme: options[:scheme]) if options[:record]

  update_testplan_on_ci(path: "#{options[:scheme]}Tests/#{options[:scheme]}.xctestplan")

  scan(
    project: xcode_project,
    scheme: options[:scheme],
    testplan: options[:scheme],
    clean: true,
    result_bundle: true,
    devices: options[:device]
  )
end

desc 'Starts Sinatra web server'
lane :start_sinatra do
  sh('bundle exec ruby sinatra.rb > sinatra-log.txt 2>&1 &')
end

desc 'Stops Sinatra web server'
lane :stop_sinatra do
  sh("lsof -t -i:#{sinatra_port} | xargs kill -9")
end

desc 'Starts Stream Video Buddy'
lane :start_video_buddy do
  sh("stream-video-buddy auth --record-session")
  sh("stream-video-buddy server --port #{video_buddy_port} > video-buddy-log.txt 2>&1 &")
end

desc 'Stops Stream Video Buddy'
lane :stop_video_buddy do
  sh("lsof -t -i:#{video_buddy_port} | xargs kill -9")
end

desc 'Runs e2e ui tests'
lane :test_e2e do |options|
  next unless is_check_required(sources: sources_matrix[:e2e])

  update_testplan_on_ci(path: 'SwiftUIDemoAppUITests/SwiftUIDemoApp.xctestplan')

  create_credentials_config
  start_sinatra
  start_video_buddy

  prepare_simulator(device: options[:device]) if is_ci

  scan_options = {
    project: xcode_project,
    scheme: 'DemoApp',
    testplan: 'SwiftUIDemoApp',
    result_bundle: true,
    devices: options[:device],
    number_of_retries: 2,
    xcargs: is_ci ? "STREAM_VIDEO_SECRET=#{app_secret}" : ''
  }

  build_for_testing = is_ci && options[:cron].nil?
  scan(scan_options.merge(clean: true, build_for_testing: build_for_testing))

  if build_for_testing
    parallelize_tests_on_ci(
      scan: scan_options,
      derived_data: lane_context[SharedValues::SCAN_DERIVED_DATA_PATH],
      batch: options[:batch]
    )
  end
end

private_lane :parallelize_tests_on_ci do |options|
  xctestrun = Dir.glob("#{options[:derived_data]}/Build/Products/*.xctestrun").first
  tests = retrieve_xctest_names(xctestrun: xctestrun).values.flatten
  slice_size = (tests.size / ENV['MATRIX_SIZE'].to_f).ceil
  only_testing = []
  tests.each_slice(slice_size) { |test| only_testing << test }
  only_testing_batch = only_testing[options[:batch].to_i]

  UI.success("Tests in total: #{only_testing.flatten.size}. Running #{only_testing_batch.size} of them ⌛️")
  scan(
    options[:scan].merge(
      test_without_building: true,
      derived_data_path: options[:derived_data],
      only_testing: only_testing_batch
    )
  )
end

private_lane :clean_up_ports_for_e2e_test do
  stop_sinatra
  stop_video_buddy
end

private_lane :update_testplan_on_ci do |options|
  update_testplan(path: options[:path], env_vars: { key: 'CI', value: 'TRUE' }) if is_ci || options[:force]
end

desc 'Builds SwiftUI Demo app'
lane :build_swiftui_demo do
  build_example_app(scheme: 'DemoApp')
end

desc 'Builds UIKit Demo app'
lane :build_uikit_demo do
  build_example_app(scheme: 'DemoAppUIKit')
end

private_lane :build_example_app do |options|
  app_sources =
    case options[:scheme]
    when 'DemoApp'
      :swiftui_sample_apps
    when 'DemoAppUIKit'
      :uikit_sample_apps
    end
  next unless is_check_required(sources: sources_matrix[app_sources])

  create_credentials_config

  scan(
    project: xcode_project,
    scheme: options[:scheme],
    clean: true,
    build_for_testing: true
  )
end

lane :emerge_swiftui do
  next unless is_check_required(sources: sources_matrix[:emerge_swiftui])

  emerge_upload(scheme: 'DemoApp')
end

lane :emerge_uikit do
  next unless is_check_required(sources: sources_matrix[:emerge_uikit])

  emerge_upload(scheme: 'DemoApp')
end

desc 'Build and upload DemoApp to Emerge'
private_lane :emerge_upload do |options|
  create_credentials_config

  gym(
    export_method: 'ad-hoc',
    project: xcode_project,
    scheme: options[:scheme],
    skip_package_ipa: true,
    skip_archive: false,
    clean: true
  )

  emerge(
    build_type: 'release',
    repo_name: github_repo,
    pr_number: ENV['GITHUB_PR_NUM'] || nil, # If `nil` then local run or merge to develop/main
    sha: ENV['GITHUB_COMMIT_SHA'] || last_git_commit[:commit_hash],
    base_sha: ENV['GITHUB_BASE_SHA'] || nil
  )
end

lane :code_generation do
  Dir.chdir('..') { sh('sh Scripts/generateCode.sh') }
  sync_xcodeproj_references
end

lane :sync_xcodeproj_references do
  Dir.chdir('..') do
    project = Xcodeproj::Project.open(xcode_project)

    untracked_files = sh('git status -s', log: false).split("\n").map(&:strip)
    deleted_swift_files = select_swift_files_from(files: untracked_files, that_start_with: 'D')
    added_swift_files = select_swift_files_from(files: untracked_files, that_start_with: ['A', '??'])
    renamed_swift_files = select_swift_files_from(files: untracked_files, that_start_with: 'R')

    renamed_swift_files.each do |renamed_file|
      content = renamed_file.split.drop(1).join.split('->').map(&:strip)
      deleted_swift_files << content.first
      added_swift_files << content.last
    end

    deleted_swift_files.each do |file_path|
      next if file_path !~ %r{(/OpenApi/|/protobuf/)}

      file = project.files.find { |f| f.full_path.to_s == file_path }
      file.remove_from_project if file
    end

    added_swift_files.each do |file_path|
      next if file_path !~ %r{(/OpenApi/|/protobuf/)} || project.files.find { |f| f.full_path.to_s == file_path }

      group = project.main_group
      split_file_path = file_path.split('/')
      file_name = split_file_path.pop

      split_file_path.each do |subfolder|
        if group[subfolder]
          group = group[subfolder]
        else
          group = group.new_group(subfolder)
          group.path = subfolder
        end
      end

      file_reference = group.new_file(file_path)
      file_reference.path = file_name
      project.targets.find { |n| n.name == 'StreamVideo' }.source_build_phase.add_file_reference(file_reference)
    end

    project.save
  end
end

def select_swift_files_from(files:, that_start_with:)
  files.select do |f|
    f.start_with?(*that_start_with)
  end.map do |f|
    f.split.drop(1).join
  end.select do |f|
    f.end_with?('.swift')
  end
end

desc 'Run fastlane linting'
lane :rubocop do
  next unless is_check_required(sources: sources_matrix[:ruby])

  sh('bundle exec rubocop')
end

desc 'Run source code linting'
lane :run_linter do
  Dir.chdir('..') do
    UI.error('SwiftFormat lint was skipped. Check out https://github.com/GetStream/ios-issues-tracking/issues/465 for more info')
    # sh('mint run swiftformat --lint --config .swiftformat Sources --exclude **/Generated, **/generated, **/protobuf, **/OpenApi')
  end
end

desc 'Remove SwiftUI snapshots'
private_lane :remove_snapshots do |options|
  Dir.glob("../#{options[:scheme]}Tests/**/__Snapshots__/**/*.png").select { |file| File.delete(file) }
end

lane :sources_matrix do
  {
    e2e: ['Sources', 'DemoApp', 'SwiftUIDemoAppUITests', xcode_project],
    unit: ['Sources', 'StreamVideoTests', xcode_project],
    swiftui: ['Sources', 'StreamVideoSwiftUITests', xcode_project],
    emerge_swiftui: ['Sources/StreamVideoSwiftUI', 'Sources/StreamVideo', xcode_project],
    emerge_uikit: ['Sources/StreamVideoUIKit'],
    uikit: ['Sources', 'StreamVideoUIKitTests', xcode_project],
    swiftui_sample_apps: ['Sources', 'DemoApp', xcode_project],
    uikit_sample_apps: ['Sources', 'DemoAppUIKit', xcode_project],
    ruby: ['fastlane']
  }
end

private_lane :current_branch do
  ENV['BRANCH_NAME'] || git_branch
end
