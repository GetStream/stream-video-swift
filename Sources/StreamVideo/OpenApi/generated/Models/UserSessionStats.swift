//
// UserSessionStats.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation


public struct UserSessionStats: Codable, JSONEncodable, Hashable {
    public var browser: String?
    public var browserVersion: String?
    public var currentIp: String?
    public var currentSfu: String?
    public var deviceModel: String?
    public var deviceVersion: String?
    public var freezeDurationSeconds: Int
    public var geolocation: GeolocationResult?
    public var jitter: Stats?
    public var latency: Stats?
    public var maxFirPerSecond: Float?
    public var maxFreezesPerSecond: Float?
    public var maxNackPerSecond: Float?
    public var maxPliPerSecond: Float?
    public var maxPublishingVideoQuality: VideoQuality?
    public var maxReceivingVideoQuality: VideoQuality?
    public var os: String?
    public var osVersion: String?
    public var packetLossFraction: Float
    public var publishingAudioCodec: String?
    public var publishingDurationSeconds: Int
    public var qualityScore: Float
    public var receivingAudioCodec: String?
    public var receivingDurationSeconds: Int
    public var sdk: String?
    public var sdkVersion: String?
    public var sessionId: String
    public var subsessions: [Subsession]?
    public var timeline: CallTimeline?
    public var totalPixelsIn: Int
    public var totalPixelsOut: Int
    public var webrtcVersion: String?

    public init(browser: String? = nil, browserVersion: String? = nil, currentIp: String? = nil, currentSfu: String? = nil, deviceModel: String? = nil, deviceVersion: String? = nil, freezeDurationSeconds: Int, geolocation: GeolocationResult? = nil, jitter: Stats? = nil, latency: Stats? = nil, maxFirPerSecond: Float? = nil, maxFreezesPerSecond: Float? = nil, maxNackPerSecond: Float? = nil, maxPliPerSecond: Float? = nil, maxPublishingVideoQuality: VideoQuality? = nil, maxReceivingVideoQuality: VideoQuality? = nil, os: String? = nil, osVersion: String? = nil, packetLossFraction: Float, publishingAudioCodec: String? = nil, publishingDurationSeconds: Int, qualityScore: Float, receivingAudioCodec: String? = nil, receivingDurationSeconds: Int, sdk: String? = nil, sdkVersion: String? = nil, sessionId: String, subsessions: [Subsession]? = nil, timeline: CallTimeline? = nil, totalPixelsIn: Int, totalPixelsOut: Int, webrtcVersion: String? = nil) {
        self.browser = browser
        self.browserVersion = browserVersion
        self.currentIp = currentIp
        self.currentSfu = currentSfu
        self.deviceModel = deviceModel
        self.deviceVersion = deviceVersion
        self.freezeDurationSeconds = freezeDurationSeconds
        self.geolocation = geolocation
        self.jitter = jitter
        self.latency = latency
        self.maxFirPerSecond = maxFirPerSecond
        self.maxFreezesPerSecond = maxFreezesPerSecond
        self.maxNackPerSecond = maxNackPerSecond
        self.maxPliPerSecond = maxPliPerSecond
        self.maxPublishingVideoQuality = maxPublishingVideoQuality
        self.maxReceivingVideoQuality = maxReceivingVideoQuality
        self.os = os
        self.osVersion = osVersion
        self.packetLossFraction = packetLossFraction
        self.publishingAudioCodec = publishingAudioCodec
        self.publishingDurationSeconds = publishingDurationSeconds
        self.qualityScore = qualityScore
        self.receivingAudioCodec = receivingAudioCodec
        self.receivingDurationSeconds = receivingDurationSeconds
        self.sdk = sdk
        self.sdkVersion = sdkVersion
        self.sessionId = sessionId
        self.subsessions = subsessions
        self.timeline = timeline
        self.totalPixelsIn = totalPixelsIn
        self.totalPixelsOut = totalPixelsOut
        self.webrtcVersion = webrtcVersion
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case browser
        case browserVersion = "browser_version"
        case currentIp = "current_ip"
        case currentSfu = "current_sfu"
        case deviceModel = "device_model"
        case deviceVersion = "device_version"
        case freezeDurationSeconds = "freeze_duration_seconds"
        case geolocation
        case jitter
        case latency
        case maxFirPerSecond = "max_fir_per_second"
        case maxFreezesPerSecond = "max_freezes_per_second"
        case maxNackPerSecond = "max_nack_per_second"
        case maxPliPerSecond = "max_pli_per_second"
        case maxPublishingVideoQuality = "max_publishing_video_quality"
        case maxReceivingVideoQuality = "max_receiving_video_quality"
        case os
        case osVersion = "os_version"
        case packetLossFraction = "packet_loss_fraction"
        case publishingAudioCodec = "publishing_audio_codec"
        case publishingDurationSeconds = "publishing_duration_seconds"
        case qualityScore = "quality_score"
        case receivingAudioCodec = "receiving_audio_codec"
        case receivingDurationSeconds = "receiving_duration_seconds"
        case sdk
        case sdkVersion = "sdk_version"
        case sessionId = "session_id"
        case subsessions
        case timeline
        case totalPixelsIn = "total_pixels_in"
        case totalPixelsOut = "total_pixels_out"
        case webrtcVersion = "webrtc_version"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(browser, forKey: .browser)
        try container.encodeIfPresent(browserVersion, forKey: .browserVersion)
        try container.encodeIfPresent(currentIp, forKey: .currentIp)
        try container.encodeIfPresent(currentSfu, forKey: .currentSfu)
        try container.encodeIfPresent(deviceModel, forKey: .deviceModel)
        try container.encodeIfPresent(deviceVersion, forKey: .deviceVersion)
        try container.encode(freezeDurationSeconds, forKey: .freezeDurationSeconds)
        try container.encodeIfPresent(geolocation, forKey: .geolocation)
        try container.encodeIfPresent(jitter, forKey: .jitter)
        try container.encodeIfPresent(latency, forKey: .latency)
        try container.encodeIfPresent(maxFirPerSecond, forKey: .maxFirPerSecond)
        try container.encodeIfPresent(maxFreezesPerSecond, forKey: .maxFreezesPerSecond)
        try container.encodeIfPresent(maxNackPerSecond, forKey: .maxNackPerSecond)
        try container.encodeIfPresent(maxPliPerSecond, forKey: .maxPliPerSecond)
        try container.encodeIfPresent(maxPublishingVideoQuality, forKey: .maxPublishingVideoQuality)
        try container.encodeIfPresent(maxReceivingVideoQuality, forKey: .maxReceivingVideoQuality)
        try container.encodeIfPresent(os, forKey: .os)
        try container.encodeIfPresent(osVersion, forKey: .osVersion)
        try container.encode(packetLossFraction, forKey: .packetLossFraction)
        try container.encodeIfPresent(publishingAudioCodec, forKey: .publishingAudioCodec)
        try container.encode(publishingDurationSeconds, forKey: .publishingDurationSeconds)
        try container.encode(qualityScore, forKey: .qualityScore)
        try container.encodeIfPresent(receivingAudioCodec, forKey: .receivingAudioCodec)
        try container.encode(receivingDurationSeconds, forKey: .receivingDurationSeconds)
        try container.encodeIfPresent(sdk, forKey: .sdk)
        try container.encodeIfPresent(sdkVersion, forKey: .sdkVersion)
        try container.encode(sessionId, forKey: .sessionId)
        try container.encodeIfPresent(subsessions, forKey: .subsessions)
        try container.encodeIfPresent(timeline, forKey: .timeline)
        try container.encode(totalPixelsIn, forKey: .totalPixelsIn)
        try container.encode(totalPixelsOut, forKey: .totalPixelsOut)
        try container.encodeIfPresent(webrtcVersion, forKey: .webrtcVersion)
    }
}

