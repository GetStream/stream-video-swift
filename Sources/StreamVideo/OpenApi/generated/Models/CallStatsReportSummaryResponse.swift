//
// CallStatsReportSummaryResponse.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation


public struct CallStatsReportSummaryResponse: Codable, JSONEncodable, Hashable {
    public var callCid: String
    public var callDurationSeconds: Int
    public var callSessionId: String
    public var callStatus: String
    public var createdAt: Date?
    public var firstStatsTime: Date
    public var qualityScore: Int?

    public init(callCid: String, callDurationSeconds: Int, callSessionId: String, callStatus: String, createdAt: Date? = nil, firstStatsTime: Date, qualityScore: Int? = nil) {
        self.callCid = callCid
        self.callDurationSeconds = callDurationSeconds
        self.callSessionId = callSessionId
        self.callStatus = callStatus
        self.createdAt = createdAt
        self.firstStatsTime = firstStatsTime
        self.qualityScore = qualityScore
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case callCid = "call_cid"
        case callDurationSeconds = "call_duration_seconds"
        case callSessionId = "call_session_id"
        case callStatus = "call_status"
        case createdAt = "created_at"
        case firstStatsTime = "first_stats_time"
        case qualityScore = "quality_score"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(callCid, forKey: .callCid)
        try container.encode(callDurationSeconds, forKey: .callDurationSeconds)
        try container.encode(callSessionId, forKey: .callSessionId)
        try container.encode(callStatus, forKey: .callStatus)
        try container.encodeIfPresent(createdAt, forKey: .createdAt)
        try container.encode(firstStatsTime, forKey: .firstStatsTime)
        try container.encodeIfPresent(qualityScore, forKey: .qualityScore)
    }
}

