//
// UserResponse.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation


public struct UserResponse: Codable, JSONEncodable, Hashable {
    /** Date/time of creation */
    public var createdAt: Date
    public var custom: [String: RawJSON]
    /** Date/time of deletion */
    public var deletedAt: Date?
    public var id: String
    public var image: String?
    public var language: String?
    public var name: String?
    public var role: String
    public var teams: [String]
    /** Date/time of the last update */
    public var updatedAt: Date

    public init(createdAt: Date, custom: [String: RawJSON], deletedAt: Date? = nil, id: String, image: String? = nil, language: String, name: String? = nil, role: String, teams: [String], updatedAt: Date) {
        self.createdAt = createdAt
        self.custom = custom
        self.deletedAt = deletedAt
        self.id = id
        self.image = image
        self.language = language
        self.name = name
        self.role = role
        self.teams = teams
        self.updatedAt = updatedAt
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case createdAt = "created_at"
        case custom
        case deletedAt = "deleted_at"
        case id
        case image
        case language
        case name
        case role
        case teams
        case updatedAt = "updated_at"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(createdAt, forKey: .createdAt)
        try container.encode(custom, forKey: .custom)
        try container.encodeIfPresent(deletedAt, forKey: .deletedAt)
        try container.encode(id, forKey: .id)
        try container.encodeIfPresent(image, forKey: .image)
        try container.encode(language, forKey: .language)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encode(role, forKey: .role)
        try container.encode(teams, forKey: .teams)
        try container.encode(updatedAt, forKey: .updatedAt)
    }
}

