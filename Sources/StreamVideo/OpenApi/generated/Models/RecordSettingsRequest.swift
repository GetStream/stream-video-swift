//
// RecordSettingsRequest.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation


public struct RecordSettingsRequest: Codable, JSONEncodable, Hashable {
    public enum Mode: String, Codable, CaseIterable {
        case available = "available"
        case disabled = "disabled"
        case autoOn = "auto-on"
        case unknown = "_unknown"

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            if let decodedValue = try? container.decode(String.self),
                let value = Self(rawValue: decodedValue) {
                self = value
            } else {
                self = .unknown
            }
        }
    }
    public enum Quality: String, Codable, CaseIterable {
        case _360p = "360p"
        case _480p = "480p"
        case _720p = "720p"
        case _1080p = "1080p"
        case _1440p = "1440p"
        case unknown = "_unknown"

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            if let decodedValue = try? container.decode(String.self),
                let value = Self(rawValue: decodedValue) {
                self = value
            } else {
                self = .unknown
            }
        }
    }
    public var audioOnly: Bool?
    public var mode: Mode
    public var quality: Quality?

    public init(audioOnly: Bool? = nil, mode: Mode, quality: Quality? = nil) {
        self.audioOnly = audioOnly
        self.mode = mode
        self.quality = quality
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case audioOnly = "audio_only"
        case mode
        case quality
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(audioOnly, forKey: .audioOnly)
        try container.encode(mode, forKey: .mode)
        try container.encodeIfPresent(quality, forKey: .quality)
    }
}

