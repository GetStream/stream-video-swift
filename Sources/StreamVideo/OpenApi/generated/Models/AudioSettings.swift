//
// AudioSettings.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif





internal struct AudioSettings: Codable, JSONEncodable, Hashable {

    internal var accessRequestEnabled: Bool
    internal var micDefaultOn: Bool
    internal var opusDtxEnabled: Bool
    internal var redundantCodingEnabled: Bool
    internal var speakerDefaultOn: Bool

    internal init(accessRequestEnabled: Bool, micDefaultOn: Bool, opusDtxEnabled: Bool, redundantCodingEnabled: Bool, speakerDefaultOn: Bool) {
        self.accessRequestEnabled = accessRequestEnabled
        self.micDefaultOn = micDefaultOn
        self.opusDtxEnabled = opusDtxEnabled
        self.redundantCodingEnabled = redundantCodingEnabled
        self.speakerDefaultOn = speakerDefaultOn
    }

    internal enum CodingKeys: String, CodingKey, CaseIterable {
        case accessRequestEnabled = "access_request_enabled"
        case micDefaultOn = "mic_default_on"
        case opusDtxEnabled = "opus_dtx_enabled"
        case redundantCodingEnabled = "redundant_coding_enabled"
        case speakerDefaultOn = "speaker_default_on"
    }

    // Encodable protocol methods

    internal func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(accessRequestEnabled, forKey: .accessRequestEnabled)
        try container.encode(micDefaultOn, forKey: .micDefaultOn)
        try container.encode(opusDtxEnabled, forKey: .opusDtxEnabled)
        try container.encode(redundantCodingEnabled, forKey: .redundantCodingEnabled)
        try container.encode(speakerDefaultOn, forKey: .speakerDefaultOn)
    }
}

