//
// CallSessionParticipantCountsUpdatedEvent.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
/** This event is sent when the participant counts in a call session are updated */

public struct CallSessionParticipantCountsUpdatedEvent: @unchecked Sendable, Event, Codable, JSONEncodable, Hashable, WSCallEvent {
    public var anonymousParticipantCount: Int
    public var callCid: String
    public var createdAt: Date
    public var participantsCountByRole: [String: Int]
    /** Call session ID */
    public var sessionId: String
    /** The type of event: \"call.session_participant_count_updated\" in this case */
    public var type: String = "call.session_participant_count_updated"

    public init(anonymousParticipantCount: Int, callCid: String, createdAt: Date, participantsCountByRole: [String: Int], sessionId: String, type: String = "call.session_participant_count_updated") {
        self.anonymousParticipantCount = anonymousParticipantCount
        self.callCid = callCid
        self.createdAt = createdAt
        self.participantsCountByRole = participantsCountByRole
        self.sessionId = sessionId
        self.type = type
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case anonymousParticipantCount = "anonymous_participant_count"
        case callCid = "call_cid"
        case createdAt = "created_at"
        case participantsCountByRole = "participants_count_by_role"
        case sessionId = "session_id"
        case type
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(anonymousParticipantCount, forKey: .anonymousParticipantCount)
        try container.encode(callCid, forKey: .callCid)
        try container.encode(createdAt, forKey: .createdAt)
        try container.encode(participantsCountByRole, forKey: .participantsCountByRole)
        try container.encode(sessionId, forKey: .sessionId)
        try container.encode(type, forKey: .type)
    }
}

