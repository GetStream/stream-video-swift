//
// UserObject.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
/** Represents chat user */

public struct UserObject: Codable, JSONEncodable, Hashable {
    /** Expiration date of the ban */
    public var banExpires: Date?
    /** Whether a user is banned or not */
    public var banned: Bool
    /** Date/time of creation */
    public var createdAt: Date?
    public var custom: [String: RawJSON]
    /** Date of deactivation */
    public var deactivatedAt: Date?
    /** Date/time of deletion */
    public var deletedAt: Date?
    /** Unique user identifier */
    public var id: String
    public var invisible: Bool?
    /** Preferred language of a user */
    public var language: String?
    /** Date of last activity */
    public var lastActive: Date?
    /** Whether a user online or not */
    public var online: Bool
    /** Revocation date for tokens */
    public var revokeTokensIssuedBefore: Date?
    /** Determines the set of user permissions */
    public var role: String
    /** List of teams user is a part of */
    public var teams: [String]?
    /** Date/time of the last update */
    public var updatedAt: Date?

    public init(banExpires: Date? = nil, banned: Bool, createdAt: Date? = nil, custom: [String: RawJSON], deactivatedAt: Date? = nil, deletedAt: Date? = nil, id: String, invisible: Bool? = nil, language: String? = nil, lastActive: Date? = nil, online: Bool, revokeTokensIssuedBefore: Date? = nil, role: String, teams: [String]? = nil, updatedAt: Date? = nil) {
        self.banExpires = banExpires
        self.banned = banned
        self.createdAt = createdAt
        self.custom = custom
        self.deactivatedAt = deactivatedAt
        self.deletedAt = deletedAt
        self.id = id
        self.invisible = invisible
        self.language = language
        self.lastActive = lastActive
        self.online = online
        self.revokeTokensIssuedBefore = revokeTokensIssuedBefore
        self.role = role
        self.teams = teams
        self.updatedAt = updatedAt
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case banExpires = "ban_expires"
        case banned
        case createdAt = "created_at"
        case custom
        case deactivatedAt = "deactivated_at"
        case deletedAt = "deleted_at"
        case id
        case invisible
        case language
        case lastActive = "last_active"
        case online
        case revokeTokensIssuedBefore = "revoke_tokens_issued_before"
        case role
        case teams
        case updatedAt = "updated_at"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(banExpires, forKey: .banExpires)
        try container.encode(banned, forKey: .banned)
        try container.encodeIfPresent(createdAt, forKey: .createdAt)
        try container.encode(custom, forKey: .custom)
        try container.encodeIfPresent(deactivatedAt, forKey: .deactivatedAt)
        try container.encodeIfPresent(deletedAt, forKey: .deletedAt)
        try container.encode(id, forKey: .id)
        try container.encodeIfPresent(invisible, forKey: .invisible)
        try container.encodeIfPresent(language, forKey: .language)
        try container.encodeIfPresent(lastActive, forKey: .lastActive)
        try container.encode(online, forKey: .online)
        try container.encodeIfPresent(revokeTokensIssuedBefore, forKey: .revokeTokensIssuedBefore)
        try container.encode(role, forKey: .role)
        try container.encodeIfPresent(teams, forKey: .teams)
        try container.encodeIfPresent(updatedAt, forKey: .updatedAt)
    }
}

