//
// UserBannedEvent.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation


public struct UserBannedEvent: @unchecked Sendable, Event, Codable, JSONEncodable, Hashable {
    public var channelId: String
    public var channelType: String
    public var cid: String
    public var createdAt: Date
    public var createdBy: UserObject
    public var expiration: Date?
    public var reason: String?
    public var shadow: Bool
    public var team: String?
    public var type: String = "user.banned"
    public var user: UserObject?

    public init(channelId: String, channelType: String, cid: String, createdAt: Date, createdBy: UserObject, expiration: Date? = nil, reason: String? = nil, shadow: Bool, team: String? = nil, type: String = "user.banned", user: UserObject? = nil) {
        self.channelId = channelId
        self.channelType = channelType
        self.cid = cid
        self.createdAt = createdAt
        self.createdBy = createdBy
        self.expiration = expiration
        self.reason = reason
        self.shadow = shadow
        self.team = team
        self.type = type
        self.user = user
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case channelId = "channel_id"
        case channelType = "channel_type"
        case cid
        case createdAt = "created_at"
        case createdBy = "created_by"
        case expiration
        case reason
        case shadow
        case team
        case type
        case user
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(channelId, forKey: .channelId)
        try container.encode(channelType, forKey: .channelType)
        try container.encode(cid, forKey: .cid)
        try container.encode(createdAt, forKey: .createdAt)
        try container.encode(createdBy, forKey: .createdBy)
        try container.encodeIfPresent(expiration, forKey: .expiration)
        try container.encodeIfPresent(reason, forKey: .reason)
        try container.encode(shadow, forKey: .shadow)
        try container.encodeIfPresent(team, forKey: .team)
        try container.encode(type, forKey: .type)
        try container.encodeIfPresent(user, forKey: .user)
    }
}

