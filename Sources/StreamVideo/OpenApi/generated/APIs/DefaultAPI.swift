//
// DefaultAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

enum HTTPMethod: String {
    case get = "GET"
    case post = "POST"
    case put = "PUT"
    case delete = "DELETE"
    case head = "HEAD"
    case patch = "PATCH"
    case options = "OPTIONS"
    case trace = "TRACE"
    case connect = "CONNECT"

    init(stringValue: String) {
        guard let method = HTTPMethod(rawValue: stringValue.uppercased()) else {
            self = .get
            return
        }
        self = method
    }
}

internal struct Request {
    var url: URL
    var method: HTTPMethod
    var body: Data? = nil
    var queryParams: [URLQueryItem] = []
    var headers: [String: String] = [:]

    func urlRequest() throws -> URLRequest {
        var urlComponents = URLComponents(url: url, resolvingAgainstBaseURL: true)!
        var existingQueryItems = urlComponents.queryItems ?? []
        existingQueryItems.append(contentsOf: queryParams)
        urlComponents.queryItems = existingQueryItems
        var urlRequest = URLRequest(url: urlComponents.url!)
        headers.forEach { (k, v) in
            urlRequest.setValue(v, forHTTPHeaderField: k)
        }
        urlRequest.httpMethod = method.rawValue
        urlRequest.httpBody = body
        return urlRequest
    }
}

protocol DefaultAPITransport: Sendable {
    func execute(request: Request) async throws -> (Data, URLResponse)
}

protocol DefaultAPIClientMiddleware: Sendable {
    func intercept(
        _ request: Request,
        next: (Request) async throws -> (Data, URLResponse)
    ) async throws -> (Data, URLResponse)
}


open class DefaultAPI: DefaultAPIEndpoints, @unchecked Sendable {
    internal var transport: DefaultAPITransport
    internal var middlewares: [DefaultAPIClientMiddleware]
    internal var basePath: String
    internal var jsonDecoder: JSONDecoder
    internal var jsonEncoder: JSONEncoder

    init(
        basePath: String,
        transport: DefaultAPITransport,
        middlewares: [DefaultAPIClientMiddleware],
        jsonDecoder: JSONDecoder = JSONDecoder.default,
        jsonEncoder: JSONEncoder = JSONEncoder.default
    ) {
        self.basePath = basePath
        self.transport = transport
        self.middlewares = middlewares
        self.jsonDecoder = jsonDecoder
        self.jsonEncoder = jsonEncoder
    }

    func send<Response: Codable>(
        request: Request,
        deserializer: (Data) throws -> Response
    ) async throws -> Response {

        // TODO: make this a bit nicer and create an API error to make it easier to handle stuff
        func makeError(_ error: Error) -> Error {
            return error
        }

        func wrappingErrors<R>(
            work: () async throws -> R,
            mapError: (Error) -> Error
        ) async throws -> R {
            do {
                return try await work()
            } catch {
                throw mapError(error)
            }
        }

        let (data, _) = try await wrappingErrors {
            var next: (Request) async throws -> (Data, URLResponse) = { _request in
                try await wrappingErrors {
                    try await self.transport.execute(request: _request)
                } mapError: { error in
                    makeError(error)
                }
            }
            for middleware in middlewares.reversed() {
                let tmp = next
                next = {
                    try await middleware.intercept(
                        $0,
                        next: tmp
                    )
                }
            }
            return try await next(request)
        } mapError: { error in
            makeError(error)
        }

        return try await wrappingErrors {
            try deserializer(data)
        } mapError: { error in
            makeError(error)
        }
    }

    func makeRequest(
        uriPath: String,
        queryParams: [URLQueryItem] = [],
        httpMethod: String
    ) throws -> Request {
        let url = URL(string: basePath + uriPath)!
        return Request(
            url: url,
            method: .init(stringValue: httpMethod),
            queryParams: queryParams,
            headers: ["Content-Type": "application/json"]
        )
    }

    func makeRequest<T: Encodable>(
        uriPath: String,
        queryParams: [URLQueryItem] = [],
        httpMethod: String,
        request: T
    ) throws -> Request {
        var r = try makeRequest(uriPath: uriPath, queryParams: queryParams, httpMethod: httpMethod)
        r.body = try jsonEncoder.encode(request)
        return r
    }


    /**
     Accept Call
     
     - parameter type: (path)  
     - parameter id: (path)  
     - returns: AcceptCallResponse
     */

    open func acceptCall(type: String, id: String) async throws -> AcceptCallResponse {
        var localVariablePath = "/video/call/{type}/{id}/accept"
        let typePreEscape = "\(APIHelper.mapValueToPathItem(type))"
        let typePostEscape = typePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{type}", with: typePostEscape, options: .literal, range: nil)
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        
        let urlRequest = try makeRequest(
            uriPath: localVariablePath,
            httpMethod: "POST"
        )
        return try await send(request: urlRequest) {
            try self.jsonDecoder.decode(AcceptCallResponse.self, from: $0)
        }
    }
    /**
     Accept Call
     - POST /video/call/{type}/{id}/accept
     -   Sends events: - call.accepted  Required permissions: - JoinCall 
     - parameter type: (path)  
     - parameter id: (path)  
     - returns: RequestBuilder<AcceptCallResponse> 
     */


    /**
     Block user on a call
     
     - parameter type: (path)  
     - parameter id: (path)  
     - parameter blockUserRequest: (body)  
     - returns: BlockUserResponse
     */

    open func blockUser(type: String, id: String, blockUserRequest: BlockUserRequest) async throws -> BlockUserResponse {
        var localVariablePath = "/video/call/{type}/{id}/block"
        let typePreEscape = "\(APIHelper.mapValueToPathItem(type))"
        let typePostEscape = typePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{type}", with: typePostEscape, options: .literal, range: nil)
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        
        let urlRequest = try makeRequest(
            uriPath: localVariablePath,
            httpMethod: "POST",
            request: blockUserRequest
        )
        return try await send(request: urlRequest) {
            try self.jsonDecoder.decode(BlockUserResponse.self, from: $0)
        }
    }
    /**
     Block user on a call
     - POST /video/call/{type}/{id}/block
     - Block a user, preventing them from joining the call until they are unblocked.  Sends events: - call.blocked_user  Required permissions: - BlockUser 
     - parameter type: (path)  
     - parameter id: (path)  
     - parameter blockUserRequest: (body)  
     - returns: RequestBuilder<BlockUserResponse> 
     */


    /**
     Collect user feedback
     
     - parameter type: (path)  
     - parameter id: (path)  
     - parameter session: (path)  
     - parameter collectUserFeedbackRequest: (body)  
     - returns: CollectUserFeedbackResponse
     */

    open func collectUserFeedback(type: String, id: String, session: String, collectUserFeedbackRequest: CollectUserFeedbackRequest) async throws -> CollectUserFeedbackResponse {
        var localVariablePath = "/video/call/{type}/{id}/feedback/{session}"
        let typePreEscape = "\(APIHelper.mapValueToPathItem(type))"
        let typePostEscape = typePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{type}", with: typePostEscape, options: .literal, range: nil)
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let sessionPreEscape = "\(APIHelper.mapValueToPathItem(session))"
        let sessionPostEscape = sessionPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{session}", with: sessionPostEscape, options: .literal, range: nil)
        
        let urlRequest = try makeRequest(
            uriPath: localVariablePath,
            httpMethod: "POST",
            request: collectUserFeedbackRequest
        )
        return try await send(request: urlRequest) {
            try self.jsonDecoder.decode(CollectUserFeedbackResponse.self, from: $0)
        }
    }
    
    /**
     Create device
     
     - parameter createDeviceRequest: (body)  
     - returns: ModelResponse
     */

    open func createDevice(createDeviceRequest: CreateDeviceRequest) async throws -> ModelResponse {
        let localVariablePath = "/video/devices"
        
        let urlRequest = try makeRequest(
            uriPath: localVariablePath,
            httpMethod: "POST",
            request: createDeviceRequest
        )
        return try await send(request: urlRequest) {
            try self.jsonDecoder.decode(ModelResponse.self, from: $0)
        }
    }
    /**
     Create device
     - POST /video/devices
     - Adds a new device to a user, if the same device already exists the call will have no effect 
     - parameter createDeviceRequest: (body)  
     - returns: RequestBuilder<ModelResponse> 
     */


    /**
     Create Guest
     
     - parameter createGuestRequest: (body)  
     - returns: CreateGuestResponse
     */

    open func createGuest(createGuestRequest: CreateGuestRequest) async throws -> CreateGuestResponse {
        let localVariablePath = "/video/guest"
        
        let urlRequest = try makeRequest(
            uriPath: localVariablePath,
            httpMethod: "POST",
            request: createGuestRequest
        )
        return try await send(request: urlRequest) {
            try self.jsonDecoder.decode(CreateGuestResponse.self, from: $0)
        }
    }
    /**
     Create Guest
     - POST /video/guest
     -  
     - parameter createGuestRequest: (body)  
     - returns: RequestBuilder<CreateGuestResponse> 
     */


    /**
     Delete device
     
     - parameter id: (query)  (optional)
     - parameter userId: (query)  (optional)
     - returns: ModelResponse
     */

    open func deleteDevice(id: String? = nil, userId: String? = nil) async throws -> ModelResponse {
        let localVariablePath = "/video/devices"
        let queryParams = APIHelper.mapValuesToQueryItems([
            "id": (wrappedValue: id?.encodeToJSON(), isExplode: true),
            "user_id": (wrappedValue: userId?.encodeToJSON(), isExplode: true),
        ])
        let urlRequest = try makeRequest(
            uriPath: localVariablePath,
            queryParams: queryParams ?? [],
            httpMethod: "DELETE"
        )
        return try await send(request: urlRequest) {
            try self.jsonDecoder.decode(ModelResponse.self, from: $0)
        }
    }
    /**
     Delete device
     - DELETE /video/devices
     - Deletes one device 
     - parameter id: (query)  (optional)
     - parameter userId: (query)  (optional)
     - returns: RequestBuilder<ModelResponse> 
     */


    /**
     End call
     
     - parameter type: (path)  
     - parameter id: (path)  
     - returns: EndCallResponse
     */

    open func endCall(type: String, id: String) async throws -> EndCallResponse {
        var localVariablePath = "/video/call/{type}/{id}/mark_ended"
        let typePreEscape = "\(APIHelper.mapValueToPathItem(type))"
        let typePostEscape = typePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{type}", with: typePostEscape, options: .literal, range: nil)
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        
        let urlRequest = try makeRequest(
            uriPath: localVariablePath,
            httpMethod: "POST"
        )
        return try await send(request: urlRequest) {
            try self.jsonDecoder.decode(EndCallResponse.self, from: $0)
        }
    }
    /**
     End call
     - POST /video/call/{type}/{id}/mark_ended
     -   Sends events: - call.ended  Required permissions: - EndCall 
     - parameter type: (path)  
     - parameter id: (path)  
     - returns: RequestBuilder<EndCallResponse> 
     */


    /**
     Get Call
     
     - parameter type: (path)  
     - parameter id: (path)  
     - parameter connectionId: (query)  (optional)
     - parameter membersLimit: (query)  (optional)
     - parameter ring: (query)  (optional)
     - parameter notify: (query)  (optional)
     - returns: GetCallResponse
     */

    open func getCall(type: String, id: String, connectionId: String? = nil, membersLimit: Int? = nil, ring: Bool? = nil, notify: Bool? = nil) async throws -> GetCallResponse {
        var localVariablePath = "/video/call/{type}/{id}"
        let typePreEscape = "\(APIHelper.mapValueToPathItem(type))"
        let typePostEscape = typePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{type}", with: typePostEscape, options: .literal, range: nil)
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let queryParams = APIHelper.mapValuesToQueryItems([
            "connection_id": (wrappedValue: connectionId?.encodeToJSON(), isExplode: true),
            "members_limit": (wrappedValue: membersLimit?.encodeToJSON(), isExplode: true),
            "ring": (wrappedValue: ring?.encodeToJSON(), isExplode: true),
            "notify": (wrappedValue: notify?.encodeToJSON(), isExplode: true),
        ])
        let urlRequest = try makeRequest(
            uriPath: localVariablePath,
            queryParams: queryParams ?? [],
            httpMethod: "GET"
        )
        return try await send(request: urlRequest) {
            try self.jsonDecoder.decode(GetCallResponse.self, from: $0)
        }
    }
    /**
     Get Call
     - GET /video/call/{type}/{id}
     -   Required permissions: - ReadCall 
     - parameter type: (path)  
     - parameter id: (path)  
     - parameter connectionId: (query)  (optional)
     - parameter membersLimit: (query)  (optional)
     - parameter ring: (query)  (optional)
     - parameter notify: (query)  (optional)
     - returns: RequestBuilder<GetCallResponse> 
     */


    /**
     Get Call Stats
     
     - parameter type: (path)  
     - parameter id: (path)  
     - parameter session: (path)  
     - returns: GetCallStatsResponse
     */

    open func getCallStats(type: String, id: String, session: String) async throws -> GetCallStatsResponse {
        var localVariablePath = "/video/call/{type}/{id}/stats/{session}"
        let typePreEscape = "\(APIHelper.mapValueToPathItem(type))"
        let typePostEscape = typePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{type}", with: typePostEscape, options: .literal, range: nil)
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let sessionPreEscape = "\(APIHelper.mapValueToPathItem(session))"
        let sessionPostEscape = sessionPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{session}", with: sessionPostEscape, options: .literal, range: nil)
        
        let urlRequest = try makeRequest(
            uriPath: localVariablePath,
            httpMethod: "GET"
        )
        return try await send(request: urlRequest) {
            try self.jsonDecoder.decode(GetCallStatsResponse.self, from: $0)
        }
    }
    /**
     Get Call Stats
     - GET /video/call/{type}/{id}/stats/{session}
     -   Required permissions: - ReadCallStats 
     - parameter type: (path)  
     - parameter id: (path)  
     - parameter session: (path)  
     - returns: RequestBuilder<GetCallStatsResponse> 
     */


    /**
     Get Edges
     
     - returns: GetEdgesResponse
     */

    open func getEdges() async throws -> GetEdgesResponse {
        let localVariablePath = "/video/edges"
        
        let urlRequest = try makeRequest(
            uriPath: localVariablePath,
            httpMethod: "GET"
        )
        return try await send(request: urlRequest) {
            try self.jsonDecoder.decode(GetEdgesResponse.self, from: $0)
        }
    }
    /**
     Get Edges
     - GET /video/edges
     - Returns the list of all edges available for video calls. 
     - returns: RequestBuilder<GetEdgesResponse> 
     */


    /**
     Get or create a call
     
     - parameter type: (path)  
     - parameter id: (path)  
     - parameter getOrCreateCallRequest: (body)  
     - parameter connectionId: (query)  (optional)
     - returns: GetOrCreateCallResponse
     */

    open func getOrCreateCall(type: String, id: String, getOrCreateCallRequest: GetOrCreateCallRequest, connectionId: String? = nil) async throws -> GetOrCreateCallResponse {
        var localVariablePath = "/video/call/{type}/{id}"
        let typePreEscape = "\(APIHelper.mapValueToPathItem(type))"
        let typePostEscape = typePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{type}", with: typePostEscape, options: .literal, range: nil)
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let queryParams = APIHelper.mapValuesToQueryItems([
            "connection_id": (wrappedValue: connectionId?.encodeToJSON(), isExplode: true),
        ])
        let urlRequest = try makeRequest(
            uriPath: localVariablePath,
            queryParams: queryParams ?? [],
            httpMethod: "POST",
            request: getOrCreateCallRequest
        )
        return try await send(request: urlRequest) {
            try self.jsonDecoder.decode(GetOrCreateCallResponse.self, from: $0)
        }
    }
    /**
     Get or create a call
     - POST /video/call/{type}/{id}
     - Gets or creates a new call  Sends events: - call.created - call.notification - call.ring  Required permissions: - CreateCall - ReadCall - UpdateCallSettings 
     - parameter type: (path)  
     - parameter id: (path)  
     - parameter getOrCreateCallRequest: (body)  
     - parameter connectionId: (query)  (optional)
     - returns: RequestBuilder<GetOrCreateCallResponse> 
     */


    /**
     Set call as live
     
     - parameter type: (path)  
     - parameter id: (path)  
     - parameter goLiveRequest: (body)  
     - returns: GoLiveResponse
     */

    open func goLive(type: String, id: String, goLiveRequest: GoLiveRequest) async throws -> GoLiveResponse {
        var localVariablePath = "/video/call/{type}/{id}/go_live"
        let typePreEscape = "\(APIHelper.mapValueToPathItem(type))"
        let typePostEscape = typePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{type}", with: typePostEscape, options: .literal, range: nil)
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        
        let urlRequest = try makeRequest(
            uriPath: localVariablePath,
            httpMethod: "POST",
            request: goLiveRequest
        )
        return try await send(request: urlRequest) {
            try self.jsonDecoder.decode(GoLiveResponse.self, from: $0)
        }
    }
    /**
     Set call as live
     - POST /video/call/{type}/{id}/go_live
     -   Sends events: - call.live_started  Required permissions: - UpdateCall 
     - parameter type: (path)  
     - parameter id: (path)  
     - parameter goLiveRequest: (body)  
     - returns: RequestBuilder<GoLiveResponse> 
     */


    /**
     Join call
     
     - parameter type: (path)  
     - parameter id: (path)  
     - parameter joinCallRequest: (body)  
     - parameter connectionId: (query)  (optional)
     - returns: JoinCallResponse
     */

    open func joinCall(type: String, id: String, joinCallRequest: JoinCallRequest, connectionId: String? = nil) async throws -> JoinCallResponse {
        var localVariablePath = "/video/call/{type}/{id}/join"
        let typePreEscape = "\(APIHelper.mapValueToPathItem(type))"
        let typePostEscape = typePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{type}", with: typePostEscape, options: .literal, range: nil)
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let queryParams = APIHelper.mapValuesToQueryItems([
            "connection_id": (wrappedValue: connectionId?.encodeToJSON(), isExplode: true),
        ])
        let urlRequest = try makeRequest(
            uriPath: localVariablePath,
            queryParams: queryParams ?? [],
            httpMethod: "POST",
            request: joinCallRequest
        )
        return try await send(request: urlRequest) {
            try self.jsonDecoder.decode(JoinCallResponse.self, from: $0)
        }
    }
    /**
     Join call
     - POST /video/call/{type}/{id}/join
     - Request to join a call  Required permissions: - CreateCall - JoinCall 
     - parameter type: (path)  
     - parameter id: (path)  
     - parameter joinCallRequest: (body)  
     - parameter connectionId: (query)  (optional)
     - returns: RequestBuilder<JoinCallResponse> 
     */


    /**
     List devices
     
     - parameter userId: (query)  (optional)
     - returns: ListDevicesResponse
     */

    open func listDevices(userId: String? = nil) async throws -> ListDevicesResponse {
        let localVariablePath = "/video/devices"
        let queryParams = APIHelper.mapValuesToQueryItems([
            "user_id": (wrappedValue: userId?.encodeToJSON(), isExplode: true),
        ])
        let urlRequest = try makeRequest(
            uriPath: localVariablePath,
            queryParams: queryParams ?? [],
            httpMethod: "GET"
        )
        return try await send(request: urlRequest) {
            try self.jsonDecoder.decode(ListDevicesResponse.self, from: $0)
        }
    }
    /**
     List devices
     - GET /video/devices
     - Returns all available devices 
     - parameter userId: (query)  (optional)
     - returns: RequestBuilder<ListDevicesResponse> 
     */


    /**
     List recordings
     
     - parameter type: (path)  
     - parameter id: (path)  
     - returns: ListRecordingsResponse
     */

    open func listRecordings(type: String, id: String) async throws -> ListRecordingsResponse {
        var localVariablePath = "/video/call/{type}/{id}/recordings"
        let typePreEscape = "\(APIHelper.mapValueToPathItem(type))"
        let typePostEscape = typePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{type}", with: typePostEscape, options: .literal, range: nil)
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        
        let urlRequest = try makeRequest(
            uriPath: localVariablePath,
            httpMethod: "GET"
        )
        return try await send(request: urlRequest) {
            try self.jsonDecoder.decode(ListRecordingsResponse.self, from: $0)
        }
    }
    /**
     List recordings
     - GET /video/call/{type}/{id}/recordings
     - Lists recordings  Required permissions: - ListRecordings 
     - parameter type: (path)  
     - parameter id: (path)  
     - returns: RequestBuilder<ListRecordingsResponse> 
     */


    /**
     List transcriptions
     
     - parameter type: (path)  
     - parameter id: (path)  
     - returns: ListTranscriptionsResponse
     */

    open func listTranscriptions(type: String, id: String) async throws -> ListTranscriptionsResponse {
        var localVariablePath = "/video/call/{type}/{id}/transcriptions"
        let typePreEscape = "\(APIHelper.mapValueToPathItem(type))"
        let typePostEscape = typePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{type}", with: typePostEscape, options: .literal, range: nil)
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        
        let urlRequest = try makeRequest(
            uriPath: localVariablePath,
            httpMethod: "GET"
        )
        return try await send(request: urlRequest) {
            try self.jsonDecoder.decode(ListTranscriptionsResponse.self, from: $0)
        }
    }
    /**
     List transcriptions
     - GET /video/call/{type}/{id}/transcriptions
     - Lists transcriptions  Required permissions: - ListTranscriptions 
     - parameter type: (path)  
     - parameter id: (path)  
     - returns: RequestBuilder<ListTranscriptionsResponse> 
     */


    /**
     Mute users
     
     - parameter type: (path)  
     - parameter id: (path)  
     - parameter muteUsersRequest: (body)  
     - returns: MuteUsersResponse
     */

    open func muteUsers(type: String, id: String, muteUsersRequest: MuteUsersRequest) async throws -> MuteUsersResponse {
        var localVariablePath = "/video/call/{type}/{id}/mute_users"
        let typePreEscape = "\(APIHelper.mapValueToPathItem(type))"
        let typePostEscape = typePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{type}", with: typePostEscape, options: .literal, range: nil)
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        
        let urlRequest = try makeRequest(
            uriPath: localVariablePath,
            httpMethod: "POST",
            request: muteUsersRequest
        )
        return try await send(request: urlRequest) {
            try self.jsonDecoder.decode(MuteUsersResponse.self, from: $0)
        }
    }
    /**
     Mute users
     - POST /video/call/{type}/{id}/mute_users
     - Mutes users in a call  Required permissions: - MuteUsers 
     - parameter type: (path)  
     - parameter id: (path)  
     - parameter muteUsersRequest: (body)  
     - returns: RequestBuilder<MuteUsersResponse> 
     */


    /**
     Query Call Stats
     
     - parameter queryCallStatsRequest: (body)  
     - returns: QueryCallStatsResponse
     */

    open func queryCallStats(queryCallStatsRequest: QueryCallStatsRequest) async throws -> QueryCallStatsResponse {
        let localVariablePath = "/video/call/stats"
        
        let urlRequest = try makeRequest(
            uriPath: localVariablePath,
            httpMethod: "POST",
            request: queryCallStatsRequest
        )
        return try await send(request: urlRequest) {
            try self.jsonDecoder.decode(QueryCallStatsResponse.self, from: $0)
        }
    }
    /**
     Query Call Stats
     - POST /video/call/stats
     -   Required permissions: - ReadCallStats 
     - parameter queryCallStatsRequest: (body)  
     - returns: RequestBuilder<QueryCallStatsResponse> 
     */


    /**
     Query call
     
     - parameter queryCallsRequest: (body)  
     - parameter connectionId: (query)  (optional)
     - returns: QueryCallsResponse
     */

    open func queryCalls(queryCallsRequest: QueryCallsRequest, connectionId: String? = nil) async throws -> QueryCallsResponse {
        let localVariablePath = "/video/calls"
        let queryParams = APIHelper.mapValuesToQueryItems([
            "connection_id": (wrappedValue: connectionId?.encodeToJSON(), isExplode: true),
        ])
        let urlRequest = try makeRequest(
            uriPath: localVariablePath,
            queryParams: queryParams ?? [],
            httpMethod: "POST",
            request: queryCallsRequest
        )
        return try await send(request: urlRequest) {
            try self.jsonDecoder.decode(QueryCallsResponse.self, from: $0)
        }
    }
    /**
     Query call
     - POST /video/calls
     - Query calls with filter query  Required permissions: - ReadCall 
     - parameter queryCallsRequest: (body)  
     - parameter connectionId: (query)  (optional)
     - returns: RequestBuilder<QueryCallsResponse> 
     */


    /**
     Query call members
     
     - parameter queryMembersRequest: (body)  
     - returns: QueryMembersResponse
     */

    open func queryMembers(queryMembersRequest: QueryMembersRequest) async throws -> QueryMembersResponse {
        let localVariablePath = "/video/call/members"
        
        let urlRequest = try makeRequest(
            uriPath: localVariablePath,
            httpMethod: "POST",
            request: queryMembersRequest
        )
        return try await send(request: urlRequest) {
            try self.jsonDecoder.decode(QueryMembersResponse.self, from: $0)
        }
    }
    /**
     Query call members
     - POST /video/call/members
     - Query call members with filter query  Required permissions: - ReadCall 
     - parameter queryMembersRequest: (body)  
     - returns: RequestBuilder<QueryMembersResponse> 
     */


    /**
     Reject Call
     
     - parameter type: (path)  
     - parameter id: (path)  
     - returns: RejectCallResponse
     */

    open func rejectCall(type: String, id: String) async throws -> RejectCallResponse {
        var localVariablePath = "/video/call/{type}/{id}/reject"
        let typePreEscape = "\(APIHelper.mapValueToPathItem(type))"
        let typePostEscape = typePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{type}", with: typePostEscape, options: .literal, range: nil)
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        
        let urlRequest = try makeRequest(
            uriPath: localVariablePath,
            httpMethod: "POST"
        )
        return try await send(request: urlRequest) {
            try self.jsonDecoder.decode(RejectCallResponse.self, from: $0)
        }
    }
    /**
     Reject Call
     - POST /video/call/{type}/{id}/reject
     -   Sends events: - call.rejected  Required permissions: - JoinCall 
     - parameter type: (path)  
     - parameter id: (path)  
     - returns: RequestBuilder<RejectCallResponse> 
     */


    /**
     Request permission
     
     - parameter type: (path)  
     - parameter id: (path)  
     - parameter requestPermissionRequest: (body)  
     - returns: RequestPermissionResponse
     */

    open func requestPermission(type: String, id: String, requestPermissionRequest: RequestPermissionRequest) async throws -> RequestPermissionResponse {
        var localVariablePath = "/video/call/{type}/{id}/request_permission"
        let typePreEscape = "\(APIHelper.mapValueToPathItem(type))"
        let typePostEscape = typePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{type}", with: typePostEscape, options: .literal, range: nil)
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        
        let urlRequest = try makeRequest(
            uriPath: localVariablePath,
            httpMethod: "POST",
            request: requestPermissionRequest
        )
        return try await send(request: urlRequest) {
            try self.jsonDecoder.decode(RequestPermissionResponse.self, from: $0)
        }
    }
    /**
     Request permission
     - POST /video/call/{type}/{id}/request_permission
     - Request permission to perform an action  Sends events: - call.permission_request 
     - parameter type: (path)  
     - parameter id: (path)  
     - parameter requestPermissionRequest: (body)  
     - returns: RequestBuilder<RequestPermissionResponse> 
     */


    /**
     Send custom event
     
     - parameter type: (path)  
     - parameter id: (path)  
     - parameter sendEventRequest: (body)  
     - returns: SendEventResponse
     */

    open func sendEvent(type: String, id: String, sendEventRequest: SendEventRequest) async throws -> SendEventResponse {
        var localVariablePath = "/video/call/{type}/{id}/event"
        let typePreEscape = "\(APIHelper.mapValueToPathItem(type))"
        let typePostEscape = typePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{type}", with: typePostEscape, options: .literal, range: nil)
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        
        let urlRequest = try makeRequest(
            uriPath: localVariablePath,
            httpMethod: "POST",
            request: sendEventRequest
        )
        return try await send(request: urlRequest) {
            try self.jsonDecoder.decode(SendEventResponse.self, from: $0)
        }
    }
    /**
     Send custom event
     - POST /video/call/{type}/{id}/event
     - Sends custom event to the call  Sends events: - custom  Required permissions: - SendEvent 
     - parameter type: (path)  
     - parameter id: (path)  
     - parameter sendEventRequest: (body)  
     - returns: RequestBuilder<SendEventResponse> 
     */


    /**
     Send reaction to the call
     
     - parameter type: (path)  
     - parameter id: (path)  
     - parameter sendReactionRequest: (body)  
     - returns: SendReactionResponse
     */

    open func sendVideoReaction(type: String, id: String, sendReactionRequest: SendReactionRequest) async throws -> SendReactionResponse {
        var localVariablePath = "/video/call/{type}/{id}/reaction"
        let typePreEscape = "\(APIHelper.mapValueToPathItem(type))"
        let typePostEscape = typePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{type}", with: typePostEscape, options: .literal, range: nil)
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        
        let urlRequest = try makeRequest(
            uriPath: localVariablePath,
            httpMethod: "POST",
            request: sendReactionRequest
        )
        return try await send(request: urlRequest) {
            try self.jsonDecoder.decode(SendReactionResponse.self, from: $0)
        }
    }
    /**
     Send reaction to the call
     - POST /video/call/{type}/{id}/reaction
     - Sends reaction to the call  Sends events: - call.reaction_new  Required permissions: - CreateCallReaction 
     - parameter type: (path)  
     - parameter id: (path)  
     - parameter sendReactionRequest: (body)  
     - returns: RequestBuilder<SendReactionResponse> 
     */


    /**
     Start HLS broadcasting
     
     - parameter type: (path)  
     - parameter id: (path)  
     - returns: StartHLSBroadcastingResponse
     */

    open func startHLSBroadcasting(type: String, id: String) async throws -> StartHLSBroadcastingResponse {
        var localVariablePath = "/video/call/{type}/{id}/start_broadcasting"
        let typePreEscape = "\(APIHelper.mapValueToPathItem(type))"
        let typePostEscape = typePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{type}", with: typePostEscape, options: .literal, range: nil)
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        
        let urlRequest = try makeRequest(
            uriPath: localVariablePath,
            httpMethod: "POST"
        )
        return try await send(request: urlRequest) {
            try self.jsonDecoder.decode(StartHLSBroadcastingResponse.self, from: $0)
        }
    }
    /**
     Start HLS broadcasting
     - POST /video/call/{type}/{id}/start_broadcasting
     - Starts HLS broadcasting  Required permissions: - StartBroadcasting 
     - parameter type: (path)  
     - parameter id: (path)  
     - returns: RequestBuilder<StartHLSBroadcastingResponse> 
     */


    /**
     Start recording
     
     - parameter type: (path)  
     - parameter id: (path)  
     - parameter startRecordingRequest: (body)  
     - returns: StartRecordingResponse
     */

    open func startRecording(type: String, id: String, startRecordingRequest: StartRecordingRequest) async throws -> StartRecordingResponse {
        var localVariablePath = "/video/call/{type}/{id}/start_recording"
        let typePreEscape = "\(APIHelper.mapValueToPathItem(type))"
        let typePostEscape = typePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{type}", with: typePostEscape, options: .literal, range: nil)
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        
        let urlRequest = try makeRequest(
            uriPath: localVariablePath,
            httpMethod: "POST",
            request: startRecordingRequest
        )
        return try await send(request: urlRequest) {
            try self.jsonDecoder.decode(StartRecordingResponse.self, from: $0)
        }
    }
    /**
     Start recording
     - POST /video/call/{type}/{id}/start_recording
     - Starts recording  Sends events: - call.recording_started  Required permissions: - StartRecording 
     - parameter type: (path)  
     - parameter id: (path)  
     - parameter startRecordingRequest: (body)  
     - returns: RequestBuilder<StartRecordingResponse> 
     */


    /**
     Start transcription
     
     - parameter type: (path)  
     - parameter id: (path)  
     - parameter startTranscriptionRequest: (body)  
     - returns: StartTranscriptionResponse
     */

    open func startTranscription(type: String, id: String, startTranscriptionRequest: StartTranscriptionRequest) async throws -> StartTranscriptionResponse {
        var localVariablePath = "/video/call/{type}/{id}/start_transcription"
        let typePreEscape = "\(APIHelper.mapValueToPathItem(type))"
        let typePostEscape = typePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{type}", with: typePostEscape, options: .literal, range: nil)
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        
        let urlRequest = try makeRequest(
            uriPath: localVariablePath,
            httpMethod: "POST",
            request: startTranscriptionRequest
        )
        return try await send(request: urlRequest) {
            try self.jsonDecoder.decode(StartTranscriptionResponse.self, from: $0)
        }
    }
    /**
     Start transcription
     - POST /video/call/{type}/{id}/start_transcription
     - Starts transcription  Required permissions: - StartTranscription 
     - parameter type: (path)  
     - parameter id: (path)  
     - parameter startTranscriptionRequest: (body)  
     - returns: RequestBuilder<StartTranscriptionResponse> 
     */


    /**
     Stop HLS broadcasting
     
     - parameter type: (path)  
     - parameter id: (path)  
     - returns: StopHLSBroadcastingResponse
     */

    open func stopHLSBroadcasting(type: String, id: String) async throws -> StopHLSBroadcastingResponse {
        var localVariablePath = "/video/call/{type}/{id}/stop_broadcasting"
        let typePreEscape = "\(APIHelper.mapValueToPathItem(type))"
        let typePostEscape = typePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{type}", with: typePostEscape, options: .literal, range: nil)
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        
        let urlRequest = try makeRequest(
            uriPath: localVariablePath,
            httpMethod: "POST"
        )
        return try await send(request: urlRequest) {
            try self.jsonDecoder.decode(StopHLSBroadcastingResponse.self, from: $0)
        }
    }
    /**
     Stop HLS broadcasting
     - POST /video/call/{type}/{id}/stop_broadcasting
     - Stops HLS broadcasting  Required permissions: - StopBroadcasting 
     - parameter type: (path)  
     - parameter id: (path)  
     - returns: RequestBuilder<StopHLSBroadcastingResponse> 
     */


    /**
     Set call as not live
     
     - parameter type: (path)  
     - parameter id: (path)  
     - returns: StopLiveResponse
     */

    open func stopLive(type: String, id: String) async throws -> StopLiveResponse {
        var localVariablePath = "/video/call/{type}/{id}/stop_live"
        let typePreEscape = "\(APIHelper.mapValueToPathItem(type))"
        let typePostEscape = typePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{type}", with: typePostEscape, options: .literal, range: nil)
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        
        let urlRequest = try makeRequest(
            uriPath: localVariablePath,
            httpMethod: "POST"
        )
        return try await send(request: urlRequest) {
            try self.jsonDecoder.decode(StopLiveResponse.self, from: $0)
        }
    }
    /**
     Set call as not live
     - POST /video/call/{type}/{id}/stop_live
     -   Sends events: - call.updated  Required permissions: - UpdateCall 
     - parameter type: (path)  
     - parameter id: (path)  
     - returns: RequestBuilder<StopLiveResponse> 
     */


    /**
     Stop recording
     
     - parameter type: (path)  
     - parameter id: (path)  
     - returns: StopRecordingResponse
     */

    open func stopRecording(type: String, id: String) async throws -> StopRecordingResponse {
        var localVariablePath = "/video/call/{type}/{id}/stop_recording"
        let typePreEscape = "\(APIHelper.mapValueToPathItem(type))"
        let typePostEscape = typePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{type}", with: typePostEscape, options: .literal, range: nil)
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        
        let urlRequest = try makeRequest(
            uriPath: localVariablePath,
            httpMethod: "POST"
        )
        return try await send(request: urlRequest) {
            try self.jsonDecoder.decode(StopRecordingResponse.self, from: $0)
        }
    }
    /**
     Stop recording
     - POST /video/call/{type}/{id}/stop_recording
     - Stops recording  Sends events: - call.recording_stopped  Required permissions: - StopRecording 
     - parameter type: (path)  
     - parameter id: (path)  
     - returns: RequestBuilder<StopRecordingResponse> 
     */


    /**
     Stop transcription
     
     - parameter type: (path)  
     - parameter id: (path)  
     - returns: StopTranscriptionResponse
     */

    open func stopTranscription(type: String, id: String) async throws -> StopTranscriptionResponse {
        var localVariablePath = "/video/call/{type}/{id}/stop_transcription"
        let typePreEscape = "\(APIHelper.mapValueToPathItem(type))"
        let typePostEscape = typePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{type}", with: typePostEscape, options: .literal, range: nil)
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        
        let urlRequest = try makeRequest(
            uriPath: localVariablePath,
            httpMethod: "POST"
        )
        return try await send(request: urlRequest) {
            try self.jsonDecoder.decode(StopTranscriptionResponse.self, from: $0)
        }
    }
    /**
     Stop transcription
     - POST /video/call/{type}/{id}/stop_transcription
     - Stops transcription  Sends events: - call.transcription_stopped  Required permissions: - StopTranscription 
     - parameter type: (path)  
     - parameter id: (path)  
     - returns: RequestBuilder<StopTranscriptionResponse> 
     */


    /**
     Unblocks user on a call
     
     - parameter type: (path)  
     - parameter id: (path)  
     - parameter unblockUserRequest: (body)  
     - returns: UnblockUserResponse
     */

    open func unblockUser(type: String, id: String, unblockUserRequest: UnblockUserRequest) async throws -> UnblockUserResponse {
        var localVariablePath = "/video/call/{type}/{id}/unblock"
        let typePreEscape = "\(APIHelper.mapValueToPathItem(type))"
        let typePostEscape = typePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{type}", with: typePostEscape, options: .literal, range: nil)
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        
        let urlRequest = try makeRequest(
            uriPath: localVariablePath,
            httpMethod: "POST",
            request: unblockUserRequest
        )
        return try await send(request: urlRequest) {
            try self.jsonDecoder.decode(UnblockUserResponse.self, from: $0)
        }
    }
    /**
     Unblocks user on a call
     - POST /video/call/{type}/{id}/unblock
     - Removes the block for a user on a call. The user will be able to join the call again.  Sends events: - call.unblocked_user  Required permissions: - BlockUser 
     - parameter type: (path)  
     - parameter id: (path)  
     - parameter unblockUserRequest: (body)  
     - returns: RequestBuilder<UnblockUserResponse> 
     */


    /**
     Update Call
     
     - parameter type: (path)  
     - parameter id: (path)  
     - parameter updateCallRequest: (body)  
     - returns: UpdateCallResponse
     */

    open func updateCall(type: String, id: String, updateCallRequest: UpdateCallRequest) async throws -> UpdateCallResponse {
        var localVariablePath = "/video/call/{type}/{id}"
        let typePreEscape = "\(APIHelper.mapValueToPathItem(type))"
        let typePostEscape = typePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{type}", with: typePostEscape, options: .literal, range: nil)
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        
        let urlRequest = try makeRequest(
            uriPath: localVariablePath,
            httpMethod: "PATCH",
            request: updateCallRequest
        )
        return try await send(request: urlRequest) {
            try self.jsonDecoder.decode(UpdateCallResponse.self, from: $0)
        }
    }
    /**
     Update Call
     - PATCH /video/call/{type}/{id}
     -   Sends events: - call.updated  Required permissions: - UpdateCall 
     - parameter type: (path)  
     - parameter id: (path)  
     - parameter updateCallRequest: (body)  
     - returns: RequestBuilder<UpdateCallResponse> 
     */


    /**
     Update Call Member
     
     - parameter type: (path)  
     - parameter id: (path)  
     - parameter updateCallMembersRequest: (body)  
     - returns: UpdateCallMembersResponse
     */

    open func updateCallMembers(type: String, id: String, updateCallMembersRequest: UpdateCallMembersRequest) async throws -> UpdateCallMembersResponse {
        var localVariablePath = "/video/call/{type}/{id}/members"
        let typePreEscape = "\(APIHelper.mapValueToPathItem(type))"
        let typePostEscape = typePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{type}", with: typePostEscape, options: .literal, range: nil)
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        
        let urlRequest = try makeRequest(
            uriPath: localVariablePath,
            httpMethod: "POST",
            request: updateCallMembersRequest
        )
        return try await send(request: urlRequest) {
            try self.jsonDecoder.decode(UpdateCallMembersResponse.self, from: $0)
        }
    }
    /**
     Update Call Member
     - POST /video/call/{type}/{id}/members
     -   Sends events: - call.member_added - call.member_removed - call.member_updated  Required permissions: - RemoveCallMember - UpdateCallMember - UpdateCallMemberRole 
     - parameter type: (path)  
     - parameter id: (path)  
     - parameter updateCallMembersRequest: (body)  
     - returns: RequestBuilder<UpdateCallMembersResponse> 
     */


    /**
     Update user permissions
     
     - parameter type: (path)  
     - parameter id: (path)  
     - parameter updateUserPermissionsRequest: (body)  
     - returns: UpdateUserPermissionsResponse
     */

    open func updateUserPermissions(type: String, id: String, updateUserPermissionsRequest: UpdateUserPermissionsRequest) async throws -> UpdateUserPermissionsResponse {
        var localVariablePath = "/video/call/{type}/{id}/user_permissions"
        let typePreEscape = "\(APIHelper.mapValueToPathItem(type))"
        let typePostEscape = typePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{type}", with: typePostEscape, options: .literal, range: nil)
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        
        let urlRequest = try makeRequest(
            uriPath: localVariablePath,
            httpMethod: "POST",
            request: updateUserPermissionsRequest
        )
        return try await send(request: urlRequest) {
            try self.jsonDecoder.decode(UpdateUserPermissionsResponse.self, from: $0)
        }
    }
    /**
     Update user permissions
     - POST /video/call/{type}/{id}/user_permissions
     - Updates user permissions  Sends events: - call.permissions_updated  Required permissions: - UpdateCallPermissions 
     - parameter type: (path)  
     - parameter id: (path)  
     - parameter updateUserPermissionsRequest: (body)  
     - returns: RequestBuilder<UpdateUserPermissionsResponse> 
     */


    /**
     Pin
     
     - parameter type: (path)  
     - parameter id: (path)  
     - parameter pinRequest: (body)  
     - returns: PinResponse
     */

    open func videoPin(type: String, id: String, pinRequest: PinRequest) async throws -> PinResponse {
        var localVariablePath = "/video/call/{type}/{id}/pin"
        let typePreEscape = "\(APIHelper.mapValueToPathItem(type))"
        let typePostEscape = typePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{type}", with: typePostEscape, options: .literal, range: nil)
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        
        let urlRequest = try makeRequest(
            uriPath: localVariablePath,
            httpMethod: "POST",
            request: pinRequest
        )
        return try await send(request: urlRequest) {
            try self.jsonDecoder.decode(PinResponse.self, from: $0)
        }
    }
    /**
     Pin
     - POST /video/call/{type}/{id}/pin
     - Pins a track for all users in the call.  Required permissions: - PinCallTrack 
     - parameter type: (path)  
     - parameter id: (path)  
     - parameter pinRequest: (body)  
     - returns: RequestBuilder<PinResponse> 
     */


    /**
     Unpin
     
     - parameter type: (path)  
     - parameter id: (path)  
     - parameter unpinRequest: (body)  
     - returns: UnpinResponse
     */

    open func videoUnpin(type: String, id: String, unpinRequest: UnpinRequest) async throws -> UnpinResponse {
        var localVariablePath = "/video/call/{type}/{id}/unpin"
        let typePreEscape = "\(APIHelper.mapValueToPathItem(type))"
        let typePostEscape = typePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{type}", with: typePostEscape, options: .literal, range: nil)
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        
        let urlRequest = try makeRequest(
            uriPath: localVariablePath,
            httpMethod: "POST",
            request: unpinRequest
        )
        return try await send(request: urlRequest) {
            try self.jsonDecoder.decode(UnpinResponse.self, from: $0)
        }
    }
    /**
     Unpin
     - POST /video/call/{type}/{id}/unpin
     - Unpins a track for all users in the call.  Required permissions: - PinCallTrack 
     - parameter type: (path)  
     - parameter id: (path)  
     - parameter unpinRequest: (body)  
     - returns: RequestBuilder<UnpinResponse> 
     */

}

protocol DefaultAPIEndpoints {


        func acceptCall(type: String, id: String) async throws -> AcceptCallResponse


        func blockUser(type: String, id: String, blockUserRequest: BlockUserRequest) async throws -> BlockUserResponse


        func collectUserFeedback(type: String, id: String, session: String, collectUserFeedbackRequest: CollectUserFeedbackRequest) async throws -> CollectUserFeedbackResponse


        func createDevice(createDeviceRequest: CreateDeviceRequest) async throws -> ModelResponse


        func createGuest(createGuestRequest: CreateGuestRequest) async throws -> CreateGuestResponse


        func deleteDevice(id: String?, userId: String?) async throws -> ModelResponse


        func endCall(type: String, id: String) async throws -> EndCallResponse


        func getCall(type: String, id: String, connectionId: String?, membersLimit: Int?, ring: Bool?, notify: Bool?) async throws -> GetCallResponse


        func getCallStats(type: String, id: String, session: String) async throws -> GetCallStatsResponse


        func getEdges() async throws -> GetEdgesResponse


        func getOrCreateCall(type: String, id: String, getOrCreateCallRequest: GetOrCreateCallRequest, connectionId: String?) async throws -> GetOrCreateCallResponse


        func goLive(type: String, id: String, goLiveRequest: GoLiveRequest) async throws -> GoLiveResponse


        func joinCall(type: String, id: String, joinCallRequest: JoinCallRequest, connectionId: String?) async throws -> JoinCallResponse


        func listDevices(userId: String?) async throws -> ListDevicesResponse


        func listRecordings(type: String, id: String) async throws -> ListRecordingsResponse


        func listTranscriptions(type: String, id: String) async throws -> ListTranscriptionsResponse


        func muteUsers(type: String, id: String, muteUsersRequest: MuteUsersRequest) async throws -> MuteUsersResponse


        func queryCallStats(queryCallStatsRequest: QueryCallStatsRequest) async throws -> QueryCallStatsResponse


        func queryCalls(queryCallsRequest: QueryCallsRequest, connectionId: String?) async throws -> QueryCallsResponse


        func queryMembers(queryMembersRequest: QueryMembersRequest) async throws -> QueryMembersResponse


        func rejectCall(type: String, id: String) async throws -> RejectCallResponse


        func requestPermission(type: String, id: String, requestPermissionRequest: RequestPermissionRequest) async throws -> RequestPermissionResponse


        func sendEvent(type: String, id: String, sendEventRequest: SendEventRequest) async throws -> SendEventResponse


        func sendVideoReaction(type: String, id: String, sendReactionRequest: SendReactionRequest) async throws -> SendReactionResponse


        func startHLSBroadcasting(type: String, id: String) async throws -> StartHLSBroadcastingResponse


        func startRecording(type: String, id: String, startRecordingRequest: StartRecordingRequest) async throws -> StartRecordingResponse


        func startTranscription(type: String, id: String, startTranscriptionRequest: StartTranscriptionRequest) async throws -> StartTranscriptionResponse


        func stopHLSBroadcasting(type: String, id: String) async throws -> StopHLSBroadcastingResponse


        func stopLive(type: String, id: String) async throws -> StopLiveResponse


        func stopRecording(type: String, id: String) async throws -> StopRecordingResponse


        func stopTranscription(type: String, id: String) async throws -> StopTranscriptionResponse


        func unblockUser(type: String, id: String, unblockUserRequest: UnblockUserRequest) async throws -> UnblockUserResponse


        func updateCall(type: String, id: String, updateCallRequest: UpdateCallRequest) async throws -> UpdateCallResponse


        func updateCallMembers(type: String, id: String, updateCallMembersRequest: UpdateCallMembersRequest) async throws -> UpdateCallMembersResponse


        func updateUserPermissions(type: String, id: String, updateUserPermissionsRequest: UpdateUserPermissionsRequest) async throws -> UpdateUserPermissionsResponse


        func videoPin(type: String, id: String, pinRequest: PinRequest) async throws -> PinResponse


        func videoUnpin(type: String, id: String, unpinRequest: UnpinRequest) async throws -> UnpinResponse


}

