//
// ChannelConfig.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation


public struct ChannelConfig: Codable, JSONEncodable, Hashable {
    public enum Automod: String, Codable, CaseIterable {
        case disabled = "disabled"
        case simple = "simple"
        case ai = "AI"
    }
    public enum AutomodBehavior: String, Codable, CaseIterable {
        case flag = "flag"
        case block = "block"
        case shadowBlock = "shadow_block"
    }
    public enum BlocklistBehavior: String, Codable, CaseIterable {
        case flag = "flag"
        case block = "block"
        case shadowBlock = "shadow_block"
    }
    public var allowedFlagReasons: [String]?
    public var automod: Automod
    public var automodBehavior: AutomodBehavior
    public var automodThresholds: Thresholds?
    public var blocklist: String?
    public var blocklistBehavior: BlocklistBehavior?
    public var blocklists: [BlockListOptions]?
    /** List of commands that channel supports */
    public var commands: [String]
    public var connectEvents: Bool
    public var createdAt: Date
    public var customEvents: Bool
    public var markMessagesPending: Bool
    public var maxMessageLength: Int
    public var mutes: Bool
    public var name: String
    public var polls: Bool
    public var pushNotifications: Bool
    public var quotes: Bool
    public var reactions: Bool
    public var readEvents: Bool
    public var reminders: Bool
    public var replies: Bool
    public var search: Bool
    public var typingEvents: Bool
    public var updatedAt: Date
    public var uploads: Bool
    public var urlEnrichment: Bool

    public init(allowedFlagReasons: [String]? = nil, automod: Automod, automodBehavior: AutomodBehavior, automodThresholds: Thresholds? = nil, blocklist: String? = nil, blocklistBehavior: BlocklistBehavior? = nil, blocklists: [BlockListOptions]? = nil, commands: [String], connectEvents: Bool, createdAt: Date, customEvents: Bool, markMessagesPending: Bool, maxMessageLength: Int, mutes: Bool, name: String, polls: Bool, pushNotifications: Bool, quotes: Bool, reactions: Bool, readEvents: Bool, reminders: Bool, replies: Bool, search: Bool, typingEvents: Bool, updatedAt: Date, uploads: Bool, urlEnrichment: Bool) {
        self.allowedFlagReasons = allowedFlagReasons
        self.automod = automod
        self.automodBehavior = automodBehavior
        self.automodThresholds = automodThresholds
        self.blocklist = blocklist
        self.blocklistBehavior = blocklistBehavior
        self.blocklists = blocklists
        self.commands = commands
        self.connectEvents = connectEvents
        self.createdAt = createdAt
        self.customEvents = customEvents
        self.markMessagesPending = markMessagesPending
        self.maxMessageLength = maxMessageLength
        self.mutes = mutes
        self.name = name
        self.polls = polls
        self.pushNotifications = pushNotifications
        self.quotes = quotes
        self.reactions = reactions
        self.readEvents = readEvents
        self.reminders = reminders
        self.replies = replies
        self.search = search
        self.typingEvents = typingEvents
        self.updatedAt = updatedAt
        self.uploads = uploads
        self.urlEnrichment = urlEnrichment
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case allowedFlagReasons = "allowed_flag_reasons"
        case automod
        case automodBehavior = "automod_behavior"
        case automodThresholds = "automod_thresholds"
        case blocklist
        case blocklistBehavior = "blocklist_behavior"
        case blocklists
        case commands
        case connectEvents = "connect_events"
        case createdAt = "created_at"
        case customEvents = "custom_events"
        case markMessagesPending = "mark_messages_pending"
        case maxMessageLength = "max_message_length"
        case mutes
        case name
        case polls
        case pushNotifications = "push_notifications"
        case quotes
        case reactions
        case readEvents = "read_events"
        case reminders
        case replies
        case search
        case typingEvents = "typing_events"
        case updatedAt = "updated_at"
        case uploads
        case urlEnrichment = "url_enrichment"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(allowedFlagReasons, forKey: .allowedFlagReasons)
        try container.encode(automod, forKey: .automod)
        try container.encode(automodBehavior, forKey: .automodBehavior)
        try container.encodeIfPresent(automodThresholds, forKey: .automodThresholds)
        try container.encodeIfPresent(blocklist, forKey: .blocklist)
        try container.encodeIfPresent(blocklistBehavior, forKey: .blocklistBehavior)
        try container.encodeIfPresent(blocklists, forKey: .blocklists)
        try container.encode(commands, forKey: .commands)
        try container.encode(connectEvents, forKey: .connectEvents)
        try container.encode(createdAt, forKey: .createdAt)
        try container.encode(customEvents, forKey: .customEvents)
        try container.encode(markMessagesPending, forKey: .markMessagesPending)
        try container.encode(maxMessageLength, forKey: .maxMessageLength)
        try container.encode(mutes, forKey: .mutes)
        try container.encode(name, forKey: .name)
        try container.encode(polls, forKey: .polls)
        try container.encode(pushNotifications, forKey: .pushNotifications)
        try container.encode(quotes, forKey: .quotes)
        try container.encode(reactions, forKey: .reactions)
        try container.encode(readEvents, forKey: .readEvents)
        try container.encode(reminders, forKey: .reminders)
        try container.encode(replies, forKey: .replies)
        try container.encode(search, forKey: .search)
        try container.encode(typingEvents, forKey: .typingEvents)
        try container.encode(updatedAt, forKey: .updatedAt)
        try container.encode(uploads, forKey: .uploads)
        try container.encode(urlEnrichment, forKey: .urlEnrichment)
    }
}

