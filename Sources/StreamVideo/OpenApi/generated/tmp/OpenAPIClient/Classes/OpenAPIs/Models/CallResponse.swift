//
// CallResponse.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
/** Represents a call */

public struct CallResponse: Codable, JSONEncodable, Hashable {
    public var backstage: Bool
    public var blockedUserIds: [String]
    /** The unique identifier for a call (<type>:<id>) */
    public var cid: String
    /** Date/time of creation */
    public var createdAt: Date
    public var createdBy: UserResponse
    public var currentSessionId: String
    /** Custom data for this object */
    public var custom: [String: RawJSON]
    public var egress: EgressResponse
    /** Date/time when the call ended */
    public var endedAt: Date?
    /** Call ID */
    public var id: String
    public var ingress: CallIngressResponse
    public var recording: Bool
    public var session: CallSessionResponse?
    public var settings: CallSettingsResponse
    /** Date/time when the call will start */
    public var startsAt: Date?
    public var team: String?
    public var thumbnails: ThumbnailResponse?
    public var transcribing: Bool
    /** The type of call */
    public var type: String
    /** Date/time of the last update */
    public var updatedAt: Date

    public init(backstage: Bool, blockedUserIds: [String], cid: String, createdAt: Date, createdBy: UserResponse, currentSessionId: String, custom: [String: RawJSON], egress: EgressResponse, endedAt: Date? = nil, id: String, ingress: CallIngressResponse, recording: Bool, session: CallSessionResponse? = nil, settings: CallSettingsResponse, startsAt: Date? = nil, team: String? = nil, thumbnails: ThumbnailResponse? = nil, transcribing: Bool, type: String, updatedAt: Date) {
        self.backstage = backstage
        self.blockedUserIds = blockedUserIds
        self.cid = cid
        self.createdAt = createdAt
        self.createdBy = createdBy
        self.currentSessionId = currentSessionId
        self.custom = custom
        self.egress = egress
        self.endedAt = endedAt
        self.id = id
        self.ingress = ingress
        self.recording = recording
        self.session = session
        self.settings = settings
        self.startsAt = startsAt
        self.team = team
        self.thumbnails = thumbnails
        self.transcribing = transcribing
        self.type = type
        self.updatedAt = updatedAt
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case backstage
        case blockedUserIds = "blocked_user_ids"
        case cid
        case createdAt = "created_at"
        case createdBy = "created_by"
        case currentSessionId = "current_session_id"
        case custom
        case egress
        case endedAt = "ended_at"
        case id
        case ingress
        case recording
        case session
        case settings
        case startsAt = "starts_at"
        case team
        case thumbnails
        case transcribing
        case type
        case updatedAt = "updated_at"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(backstage, forKey: .backstage)
        try container.encode(blockedUserIds, forKey: .blockedUserIds)
        try container.encode(cid, forKey: .cid)
        try container.encode(createdAt, forKey: .createdAt)
        try container.encode(createdBy, forKey: .createdBy)
        try container.encode(currentSessionId, forKey: .currentSessionId)
        try container.encode(custom, forKey: .custom)
        try container.encode(egress, forKey: .egress)
        try container.encodeIfPresent(endedAt, forKey: .endedAt)
        try container.encode(id, forKey: .id)
        try container.encode(ingress, forKey: .ingress)
        try container.encode(recording, forKey: .recording)
        try container.encodeIfPresent(session, forKey: .session)
        try container.encode(settings, forKey: .settings)
        try container.encodeIfPresent(startsAt, forKey: .startsAt)
        try container.encodeIfPresent(team, forKey: .team)
        try container.encodeIfPresent(thumbnails, forKey: .thumbnails)
        try container.encode(transcribing, forKey: .transcribing)
        try container.encode(type, forKey: .type)
        try container.encode(updatedAt, forKey: .updatedAt)
    }
}

