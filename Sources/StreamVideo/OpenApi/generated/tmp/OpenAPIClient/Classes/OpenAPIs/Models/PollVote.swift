//
// PollVote.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation


public struct PollVote: Codable, JSONEncodable, Hashable {
    public var answerText: String?
    public var createdAt: Date
    public var id: String
    public var isAnswer: Bool?
    public var optionId: String
    public var pollId: String
    public var updatedAt: Date
    public var user: UserObject?
    public var userId: String?

    public init(answerText: String? = nil, createdAt: Date, id: String, isAnswer: Bool? = nil, optionId: String, pollId: String, updatedAt: Date, user: UserObject? = nil, userId: String? = nil) {
        self.answerText = answerText
        self.createdAt = createdAt
        self.id = id
        self.isAnswer = isAnswer
        self.optionId = optionId
        self.pollId = pollId
        self.updatedAt = updatedAt
        self.user = user
        self.userId = userId
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case answerText = "answer_text"
        case createdAt = "created_at"
        case id
        case isAnswer = "is_answer"
        case optionId = "option_id"
        case pollId = "poll_id"
        case updatedAt = "updated_at"
        case user
        case userId = "user_id"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(answerText, forKey: .answerText)
        try container.encode(createdAt, forKey: .createdAt)
        try container.encode(id, forKey: .id)
        try container.encodeIfPresent(isAnswer, forKey: .isAnswer)
        try container.encode(optionId, forKey: .optionId)
        try container.encode(pollId, forKey: .pollId)
        try container.encode(updatedAt, forKey: .updatedAt)
        try container.encodeIfPresent(user, forKey: .user)
        try container.encodeIfPresent(userId, forKey: .userId)
    }
}

