//
// Poll.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation


public struct Poll: Codable, JSONEncodable, Hashable {
    public var custom: [String: RawJSON]
    public var allowAnswers: Bool
    public var allowUserSuggestedOptions: Bool
    public var answersCount: Int
    public var createdAt: Date
    public var createdBy: UserObject?
    public var createdById: String
    public var description: String
    public var enforceUniqueVote: Bool
    public var id: String
    public var isClosed: Bool?
    public var latestAnswers: [PollVote]
    public var latestVotesByOption: [String: [PollVote]]
    public var maxVotesAllowed: Int?
    public var name: String
    public var options: [PollOption]
    public var ownVotes: [PollVote]
    public var updatedAt: Date
    public var voteCount: Int
    public var voteCountsByOption: [String: Int]
    public var votingVisibility: String?

    public init(custom: [String: RawJSON], allowAnswers: Bool, allowUserSuggestedOptions: Bool, answersCount: Int, createdAt: Date, createdBy: UserObject? = nil, createdById: String, description: String, enforceUniqueVote: Bool, id: String, isClosed: Bool? = nil, latestAnswers: [PollVote], latestVotesByOption: [String: [PollVote]], maxVotesAllowed: Int? = nil, name: String, options: [PollOption], ownVotes: [PollVote], updatedAt: Date, voteCount: Int, voteCountsByOption: [String: Int], votingVisibility: String? = nil) {
        self.custom = custom
        self.allowAnswers = allowAnswers
        self.allowUserSuggestedOptions = allowUserSuggestedOptions
        self.answersCount = answersCount
        self.createdAt = createdAt
        self.createdBy = createdBy
        self.createdById = createdById
        self.description = description
        self.enforceUniqueVote = enforceUniqueVote
        self.id = id
        self.isClosed = isClosed
        self.latestAnswers = latestAnswers
        self.latestVotesByOption = latestVotesByOption
        self.maxVotesAllowed = maxVotesAllowed
        self.name = name
        self.options = options
        self.ownVotes = ownVotes
        self.updatedAt = updatedAt
        self.voteCount = voteCount
        self.voteCountsByOption = voteCountsByOption
        self.votingVisibility = votingVisibility
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case custom = "Custom"
        case allowAnswers = "allow_answers"
        case allowUserSuggestedOptions = "allow_user_suggested_options"
        case answersCount = "answers_count"
        case createdAt = "created_at"
        case createdBy = "created_by"
        case createdById = "created_by_id"
        case description
        case enforceUniqueVote = "enforce_unique_vote"
        case id
        case isClosed = "is_closed"
        case latestAnswers = "latest_answers"
        case latestVotesByOption = "latest_votes_by_option"
        case maxVotesAllowed = "max_votes_allowed"
        case name
        case options
        case ownVotes = "own_votes"
        case updatedAt = "updated_at"
        case voteCount = "vote_count"
        case voteCountsByOption = "vote_counts_by_option"
        case votingVisibility = "voting_visibility"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(custom, forKey: .custom)
        try container.encode(allowAnswers, forKey: .allowAnswers)
        try container.encode(allowUserSuggestedOptions, forKey: .allowUserSuggestedOptions)
        try container.encode(answersCount, forKey: .answersCount)
        try container.encode(createdAt, forKey: .createdAt)
        try container.encodeIfPresent(createdBy, forKey: .createdBy)
        try container.encode(createdById, forKey: .createdById)
        try container.encode(description, forKey: .description)
        try container.encode(enforceUniqueVote, forKey: .enforceUniqueVote)
        try container.encode(id, forKey: .id)
        try container.encodeIfPresent(isClosed, forKey: .isClosed)
        try container.encode(latestAnswers, forKey: .latestAnswers)
        try container.encode(latestVotesByOption, forKey: .latestVotesByOption)
        try container.encodeIfPresent(maxVotesAllowed, forKey: .maxVotesAllowed)
        try container.encode(name, forKey: .name)
        try container.encode(options, forKey: .options)
        try container.encode(ownVotes, forKey: .ownVotes)
        try container.encode(updatedAt, forKey: .updatedAt)
        try container.encode(voteCount, forKey: .voteCount)
        try container.encode(voteCountsByOption, forKey: .voteCountsByOption)
        try container.encodeIfPresent(votingVisibility, forKey: .votingVisibility)
    }
}

