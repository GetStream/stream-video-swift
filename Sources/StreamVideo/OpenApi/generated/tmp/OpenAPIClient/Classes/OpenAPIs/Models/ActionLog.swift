//
// ActionLog.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation


public struct ActionLog: Codable, JSONEncodable, Hashable {
    public var createdAt: Date
    public var custom: [String: RawJSON]
    public var id: String
    public var reason: String
    public var reviewQueueItem: ReviewQueueItem?
    public var reviewQueueItemId: String
    public var targetUser: UserObject?
    public var targetUserId: String
    public var type: String
    public var user: UserObject?

    public init(createdAt: Date, custom: [String: RawJSON], id: String, reason: String, reviewQueueItem: ReviewQueueItem? = nil, reviewQueueItemId: String, targetUser: UserObject? = nil, targetUserId: String, type: String, user: UserObject? = nil) {
        self.createdAt = createdAt
        self.custom = custom
        self.id = id
        self.reason = reason
        self.reviewQueueItem = reviewQueueItem
        self.reviewQueueItemId = reviewQueueItemId
        self.targetUser = targetUser
        self.targetUserId = targetUserId
        self.type = type
        self.user = user
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case createdAt = "created_at"
        case custom
        case id
        case reason
        case reviewQueueItem = "review_queue_item"
        case reviewQueueItemId = "review_queue_item_id"
        case targetUser = "target_user"
        case targetUserId = "target_user_id"
        case type
        case user
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(createdAt, forKey: .createdAt)
        try container.encode(custom, forKey: .custom)
        try container.encode(id, forKey: .id)
        try container.encode(reason, forKey: .reason)
        try container.encodeIfPresent(reviewQueueItem, forKey: .reviewQueueItem)
        try container.encode(reviewQueueItemId, forKey: .reviewQueueItemId)
        try container.encodeIfPresent(targetUser, forKey: .targetUser)
        try container.encode(targetUserId, forKey: .targetUserId)
        try container.encode(type, forKey: .type)
        try container.encodeIfPresent(user, forKey: .user)
    }
}

