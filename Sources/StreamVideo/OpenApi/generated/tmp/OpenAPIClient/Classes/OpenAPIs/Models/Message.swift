//
// Message.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
/** Represents any chat message */

public struct Message: Codable, JSONEncodable, Hashable {
    public enum ModelType: String, Codable, CaseIterable {
        case regular = "regular"
        case ephemeral = "ephemeral"
        case error = "error"
        case reply = "reply"
        case system = "system"
        case deleted = "deleted"
    }
    /** Array of message attachments */
    public var attachments: [Attachment]
    /** Whether `before_message_send webhook` failed or not. Field is only accessible in push webhook */
    public var beforeMessageSendFailed: Bool?
    /** Channel unique identifier in <type>:<id> format */
    public var cid: String
    /** Contains provided slash command */
    public var command: String?
    /** Date/time of creation */
    public var createdAt: Date
    public var custom: [String: RawJSON]
    /** Date/time of deletion */
    public var deletedAt: Date?
    public var deletedReplyCount: Int
    /** Contains HTML markup of the message. Can only be set when using server-side API */
    public var html: String
    /** Object with translations. Key `language` contains the original language key. Other keys contain translations */
    public var i18n: [String: String]?
    /** Message ID is unique string identifier of the message */
    public var id: String
    /** Contains image moderation information */
    public var imageLabels: [String: [String]]?
    /** List of 10 latest reactions to this message */
    public var latestReactions: [Reaction]
    /** List of mentioned users */
    public var mentionedUsers: [UserObject]
    public var messageTextUpdatedAt: Date?
    /** Should be empty if `text` is provided. Can only be set when using server-side API */
    public var mml: String?
    /** List of 10 latest reactions of authenticated user to this message */
    public var ownReactions: [Reaction]
    /** ID of parent message (thread) */
    public var parentId: String?
    /** Date when pinned message expires */
    public var pinExpires: Date?
    /** Whether message is pinned or not */
    public var pinned: Bool
    /** Date when message got pinned */
    public var pinnedAt: Date?
    public var pinnedBy: UserObject?
    public var poll: Poll?
    /** Identifier of the poll to include in the message */
    public var pollId: String?
    public var quotedMessage: Message?
    public var quotedMessageId: String?
    /** An object containing number of reactions of each type. Key: reaction type (string), value: number of reactions (int) */
    public var reactionCounts: [String: Int]
    public var reactionGroups: [String: ReactionGroupResponse]
    /** An object containing scores of reactions of each type. Key: reaction type (string), value: total score of reactions (int) */
    public var reactionScores: [String: Int]
    /** Number of replies to this message */
    public var replyCount: Int
    /** Whether the message was shadowed or not */
    public var shadowed: Bool
    /** Whether thread reply should be shown in the channel as well */
    public var showInChannel: Bool?
    /** Whether message is silent or not */
    public var silent: Bool
    /** Text of the message. Should be empty if `mml` is provided */
    public var text: String
    /** List of users who participate in thread */
    public var threadParticipants: [UserObject]?
    /** Contains type of the message */
    public var type: ModelType
    /** Date/time of the last update */
    public var updatedAt: Date
    public var user: UserObject?

    public init(attachments: [Attachment], beforeMessageSendFailed: Bool? = nil, cid: String, command: String? = nil, createdAt: Date, custom: [String: RawJSON], deletedAt: Date? = nil, deletedReplyCount: Int, html: String, i18n: [String: String]? = nil, id: String, imageLabels: [String: [String]]? = nil, latestReactions: [Reaction], mentionedUsers: [UserObject], messageTextUpdatedAt: Date? = nil, mml: String? = nil, ownReactions: [Reaction], parentId: String? = nil, pinExpires: Date? = nil, pinned: Bool, pinnedAt: Date? = nil, pinnedBy: UserObject? = nil, poll: Poll? = nil, pollId: String? = nil, quotedMessage: Message? = nil, quotedMessageId: String? = nil, reactionCounts: [String: Int], reactionGroups: [String: ReactionGroupResponse], reactionScores: [String: Int], replyCount: Int, shadowed: Bool, showInChannel: Bool? = nil, silent: Bool, text: String, threadParticipants: [UserObject]? = nil, type: ModelType, updatedAt: Date, user: UserObject? = nil) {
        self.attachments = attachments
        self.beforeMessageSendFailed = beforeMessageSendFailed
        self.cid = cid
        self.command = command
        self.createdAt = createdAt
        self.custom = custom
        self.deletedAt = deletedAt
        self.deletedReplyCount = deletedReplyCount
        self.html = html
        self.i18n = i18n
        self.id = id
        self.imageLabels = imageLabels
        self.latestReactions = latestReactions
        self.mentionedUsers = mentionedUsers
        self.messageTextUpdatedAt = messageTextUpdatedAt
        self.mml = mml
        self.ownReactions = ownReactions
        self.parentId = parentId
        self.pinExpires = pinExpires
        self.pinned = pinned
        self.pinnedAt = pinnedAt
        self.pinnedBy = pinnedBy
        self.poll = poll
        self.pollId = pollId
        self.quotedMessage = quotedMessage
        self.quotedMessageId = quotedMessageId
        self.reactionCounts = reactionCounts
        self.reactionGroups = reactionGroups
        self.reactionScores = reactionScores
        self.replyCount = replyCount
        self.shadowed = shadowed
        self.showInChannel = showInChannel
        self.silent = silent
        self.text = text
        self.threadParticipants = threadParticipants
        self.type = type
        self.updatedAt = updatedAt
        self.user = user
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case attachments
        case beforeMessageSendFailed = "before_message_send_failed"
        case cid
        case command
        case createdAt = "created_at"
        case custom
        case deletedAt = "deleted_at"
        case deletedReplyCount = "deleted_reply_count"
        case html
        case i18n
        case id
        case imageLabels = "image_labels"
        case latestReactions = "latest_reactions"
        case mentionedUsers = "mentioned_users"
        case messageTextUpdatedAt = "message_text_updated_at"
        case mml
        case ownReactions = "own_reactions"
        case parentId = "parent_id"
        case pinExpires = "pin_expires"
        case pinned
        case pinnedAt = "pinned_at"
        case pinnedBy = "pinned_by"
        case poll
        case pollId = "poll_id"
        case quotedMessage = "quoted_message"
        case quotedMessageId = "quoted_message_id"
        case reactionCounts = "reaction_counts"
        case reactionGroups = "reaction_groups"
        case reactionScores = "reaction_scores"
        case replyCount = "reply_count"
        case shadowed
        case showInChannel = "show_in_channel"
        case silent
        case text
        case threadParticipants = "thread_participants"
        case type
        case updatedAt = "updated_at"
        case user
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(attachments, forKey: .attachments)
        try container.encodeIfPresent(beforeMessageSendFailed, forKey: .beforeMessageSendFailed)
        try container.encode(cid, forKey: .cid)
        try container.encodeIfPresent(command, forKey: .command)
        try container.encode(createdAt, forKey: .createdAt)
        try container.encode(custom, forKey: .custom)
        try container.encodeIfPresent(deletedAt, forKey: .deletedAt)
        try container.encode(deletedReplyCount, forKey: .deletedReplyCount)
        try container.encode(html, forKey: .html)
        try container.encodeIfPresent(i18n, forKey: .i18n)
        try container.encode(id, forKey: .id)
        try container.encodeIfPresent(imageLabels, forKey: .imageLabels)
        try container.encode(latestReactions, forKey: .latestReactions)
        try container.encode(mentionedUsers, forKey: .mentionedUsers)
        try container.encodeIfPresent(messageTextUpdatedAt, forKey: .messageTextUpdatedAt)
        try container.encodeIfPresent(mml, forKey: .mml)
        try container.encode(ownReactions, forKey: .ownReactions)
        try container.encodeIfPresent(parentId, forKey: .parentId)
        try container.encodeIfPresent(pinExpires, forKey: .pinExpires)
        try container.encode(pinned, forKey: .pinned)
        try container.encodeIfPresent(pinnedAt, forKey: .pinnedAt)
        try container.encodeIfPresent(pinnedBy, forKey: .pinnedBy)
        try container.encodeIfPresent(poll, forKey: .poll)
        try container.encodeIfPresent(pollId, forKey: .pollId)
        try container.encodeIfPresent(quotedMessage, forKey: .quotedMessage)
        try container.encodeIfPresent(quotedMessageId, forKey: .quotedMessageId)
        try container.encode(reactionCounts, forKey: .reactionCounts)
        try container.encode(reactionGroups, forKey: .reactionGroups)
        try container.encode(reactionScores, forKey: .reactionScores)
        try container.encode(replyCount, forKey: .replyCount)
        try container.encode(shadowed, forKey: .shadowed)
        try container.encodeIfPresent(showInChannel, forKey: .showInChannel)
        try container.encode(silent, forKey: .silent)
        try container.encode(text, forKey: .text)
        try container.encodeIfPresent(threadParticipants, forKey: .threadParticipants)
        try container.encode(type, forKey: .type)
        try container.encode(updatedAt, forKey: .updatedAt)
        try container.encodeIfPresent(user, forKey: .user)
    }
}

