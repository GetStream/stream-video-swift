//
// ReviewQueueItem.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation


public struct ReviewQueueItem: Codable, JSONEncodable, Hashable {
    public var actions: [ActionLog]
    public var assignedTo: UserObject?
    public var bans: [Ban]
    public var completedAt: NullTime
    public var contentChanged: Bool
    public var createdAt: Date
    public var entityCreator: UserObject?
    public var entityId: String
    public var entityType: String
    public var feedsV2Activity: EnrichedActivity?
    public var feedsV2Reaction: Reaction?
    public var flags: [Flag2]
    public var hasImage: Bool
    public var hasText: Bool
    public var hasVideo: Bool
    public var id: String
    public var languages: [String]
    public var message: Message?
    public var moderationPayload: ModerationPayload?
    public var moderationPayloadHash: String
    public var recommendedAction: String
    public var reviewedAt: NullTime
    public var reviewedBy: String
    public var severity: Int
    public var status: String
    public var updatedAt: Date

    public init(actions: [ActionLog], assignedTo: UserObject? = nil, bans: [Ban], completedAt: NullTime, contentChanged: Bool, createdAt: Date, entityCreator: UserObject? = nil, entityId: String, entityType: String, feedsV2Activity: EnrichedActivity? = nil, feedsV2Reaction: Reaction? = nil, flags: [Flag2], hasImage: Bool, hasText: Bool, hasVideo: Bool, id: String, languages: [String], message: Message? = nil, moderationPayload: ModerationPayload? = nil, moderationPayloadHash: String, recommendedAction: String, reviewedAt: NullTime, reviewedBy: String, severity: Int, status: String, updatedAt: Date) {
        self.actions = actions
        self.assignedTo = assignedTo
        self.bans = bans
        self.completedAt = completedAt
        self.contentChanged = contentChanged
        self.createdAt = createdAt
        self.entityCreator = entityCreator
        self.entityId = entityId
        self.entityType = entityType
        self.feedsV2Activity = feedsV2Activity
        self.feedsV2Reaction = feedsV2Reaction
        self.flags = flags
        self.hasImage = hasImage
        self.hasText = hasText
        self.hasVideo = hasVideo
        self.id = id
        self.languages = languages
        self.message = message
        self.moderationPayload = moderationPayload
        self.moderationPayloadHash = moderationPayloadHash
        self.recommendedAction = recommendedAction
        self.reviewedAt = reviewedAt
        self.reviewedBy = reviewedBy
        self.severity = severity
        self.status = status
        self.updatedAt = updatedAt
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case actions
        case assignedTo = "assigned_to"
        case bans
        case completedAt = "completed_at"
        case contentChanged = "content_changed"
        case createdAt = "created_at"
        case entityCreator = "entity_creator"
        case entityId = "entity_id"
        case entityType = "entity_type"
        case feedsV2Activity = "feeds_v2_activity"
        case feedsV2Reaction = "feeds_v2_reaction"
        case flags
        case hasImage = "has_image"
        case hasText = "has_text"
        case hasVideo = "has_video"
        case id
        case languages
        case message
        case moderationPayload = "moderation_payload"
        case moderationPayloadHash = "moderation_payload_hash"
        case recommendedAction = "recommended_action"
        case reviewedAt = "reviewed_at"
        case reviewedBy = "reviewed_by"
        case severity
        case status
        case updatedAt = "updated_at"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(actions, forKey: .actions)
        try container.encodeIfPresent(assignedTo, forKey: .assignedTo)
        try container.encode(bans, forKey: .bans)
        try container.encode(completedAt, forKey: .completedAt)
        try container.encode(contentChanged, forKey: .contentChanged)
        try container.encode(createdAt, forKey: .createdAt)
        try container.encodeIfPresent(entityCreator, forKey: .entityCreator)
        try container.encode(entityId, forKey: .entityId)
        try container.encode(entityType, forKey: .entityType)
        try container.encodeIfPresent(feedsV2Activity, forKey: .feedsV2Activity)
        try container.encodeIfPresent(feedsV2Reaction, forKey: .feedsV2Reaction)
        try container.encode(flags, forKey: .flags)
        try container.encode(hasImage, forKey: .hasImage)
        try container.encode(hasText, forKey: .hasText)
        try container.encode(hasVideo, forKey: .hasVideo)
        try container.encode(id, forKey: .id)
        try container.encode(languages, forKey: .languages)
        try container.encodeIfPresent(message, forKey: .message)
        try container.encodeIfPresent(moderationPayload, forKey: .moderationPayload)
        try container.encode(moderationPayloadHash, forKey: .moderationPayloadHash)
        try container.encode(recommendedAction, forKey: .recommendedAction)
        try container.encode(reviewedAt, forKey: .reviewedAt)
        try container.encode(reviewedBy, forKey: .reviewedBy)
        try container.encode(severity, forKey: .severity)
        try container.encode(status, forKey: .status)
        try container.encode(updatedAt, forKey: .updatedAt)
    }
}

