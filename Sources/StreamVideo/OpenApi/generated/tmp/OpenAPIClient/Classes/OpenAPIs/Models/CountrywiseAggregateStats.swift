//
// CountrywiseAggregateStats.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation


public struct CountrywiseAggregateStats: Codable, JSONEncodable, Hashable {
    public var participantCount: Count?
    public var publisherJitter: TimeStats?
    public var publisherLatency: TimeStats?
    public var subscriberJitter: TimeStats?
    public var subscriberLatency: TimeStats?

    public init(participantCount: Count? = nil, publisherJitter: TimeStats? = nil, publisherLatency: TimeStats? = nil, subscriberJitter: TimeStats? = nil, subscriberLatency: TimeStats? = nil) {
        self.participantCount = participantCount
        self.publisherJitter = publisherJitter
        self.publisherLatency = publisherLatency
        self.subscriberJitter = subscriberJitter
        self.subscriberLatency = subscriberLatency
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case participantCount = "participant_count"
        case publisherJitter = "publisher_jitter"
        case publisherLatency = "publisher_latency"
        case subscriberJitter = "subscriber_jitter"
        case subscriberLatency = "subscriber_latency"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(participantCount, forKey: .participantCount)
        try container.encodeIfPresent(publisherJitter, forKey: .publisherJitter)
        try container.encodeIfPresent(publisherLatency, forKey: .publisherLatency)
        try container.encodeIfPresent(subscriberJitter, forKey: .subscriberJitter)
        try container.encodeIfPresent(subscriberLatency, forKey: .subscriberLatency)
    }
}

