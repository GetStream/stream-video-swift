//
// ChannelResponse.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
/** Represents channel in chat */

public struct ChannelResponse: Codable, JSONEncodable, Hashable {
    /** Whether auto translation is enabled or not */
    public var autoTranslationEnabled: Bool?
    /** Language to translate to when auto translation is active */
    public var autoTranslationLanguage: String?
    /** Whether this channel is blocked by current user or not */
    public var blocked: Bool?
    /** Channel CID (<type>:<id>) */
    public var cid: String
    public var config: ChannelConfigWithInfo?
    /** Cooldown period after sending each message */
    public var cooldown: Int?
    /** Date/time of creation */
    public var createdAt: Date
    public var createdBy: UserObject?
    public var custom: [String: RawJSON]
    /** Date/time of deletion */
    public var deletedAt: Date?
    public var disabled: Bool
    /** Whether channel is frozen or not */
    public var frozen: Bool
    /** Whether this channel is hidden by current user or not */
    public var hidden: Bool?
    /** Date since when the message history is accessible */
    public var hideMessagesBefore: Date?
    /** Channel unique ID */
    public var id: String
    /** Date of the last message sent */
    public var lastMessageAt: Date?
    /** Number of members in the channel */
    public var memberCount: Int?
    /** List of channel members (max 100) */
    public var members: [ChannelMember]?
    /** Date of mute expiration */
    public var muteExpiresAt: Date?
    /** Whether this channel is muted or not */
    public var muted: Bool?
    /** List of channel capabilities of authenticated user */
    public var ownCapabilities: [String]?
    /** Team the channel belongs to (multi-tenant only) */
    public var team: String?
    /** Date of the latest truncation of the channel */
    public var truncatedAt: Date?
    public var truncatedBy: UserObject?
    /** Type of the channel */
    public var type: String
    /** Date/time of the last update */
    public var updatedAt: Date

    public init(autoTranslationEnabled: Bool? = nil, autoTranslationLanguage: String? = nil, blocked: Bool? = nil, cid: String, config: ChannelConfigWithInfo? = nil, cooldown: Int? = nil, createdAt: Date, createdBy: UserObject? = nil, custom: [String: RawJSON], deletedAt: Date? = nil, disabled: Bool, frozen: Bool, hidden: Bool? = nil, hideMessagesBefore: Date? = nil, id: String, lastMessageAt: Date? = nil, memberCount: Int? = nil, members: [ChannelMember]? = nil, muteExpiresAt: Date? = nil, muted: Bool? = nil, ownCapabilities: [String]? = nil, team: String? = nil, truncatedAt: Date? = nil, truncatedBy: UserObject? = nil, type: String, updatedAt: Date) {
        self.autoTranslationEnabled = autoTranslationEnabled
        self.autoTranslationLanguage = autoTranslationLanguage
        self.blocked = blocked
        self.cid = cid
        self.config = config
        self.cooldown = cooldown
        self.createdAt = createdAt
        self.createdBy = createdBy
        self.custom = custom
        self.deletedAt = deletedAt
        self.disabled = disabled
        self.frozen = frozen
        self.hidden = hidden
        self.hideMessagesBefore = hideMessagesBefore
        self.id = id
        self.lastMessageAt = lastMessageAt
        self.memberCount = memberCount
        self.members = members
        self.muteExpiresAt = muteExpiresAt
        self.muted = muted
        self.ownCapabilities = ownCapabilities
        self.team = team
        self.truncatedAt = truncatedAt
        self.truncatedBy = truncatedBy
        self.type = type
        self.updatedAt = updatedAt
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case autoTranslationEnabled = "auto_translation_enabled"
        case autoTranslationLanguage = "auto_translation_language"
        case blocked
        case cid
        case config
        case cooldown
        case createdAt = "created_at"
        case createdBy = "created_by"
        case custom
        case deletedAt = "deleted_at"
        case disabled
        case frozen
        case hidden
        case hideMessagesBefore = "hide_messages_before"
        case id
        case lastMessageAt = "last_message_at"
        case memberCount = "member_count"
        case members
        case muteExpiresAt = "mute_expires_at"
        case muted
        case ownCapabilities = "own_capabilities"
        case team
        case truncatedAt = "truncated_at"
        case truncatedBy = "truncated_by"
        case type
        case updatedAt = "updated_at"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(autoTranslationEnabled, forKey: .autoTranslationEnabled)
        try container.encodeIfPresent(autoTranslationLanguage, forKey: .autoTranslationLanguage)
        try container.encodeIfPresent(blocked, forKey: .blocked)
        try container.encode(cid, forKey: .cid)
        try container.encodeIfPresent(config, forKey: .config)
        try container.encodeIfPresent(cooldown, forKey: .cooldown)
        try container.encode(createdAt, forKey: .createdAt)
        try container.encodeIfPresent(createdBy, forKey: .createdBy)
        try container.encode(custom, forKey: .custom)
        try container.encodeIfPresent(deletedAt, forKey: .deletedAt)
        try container.encode(disabled, forKey: .disabled)
        try container.encode(frozen, forKey: .frozen)
        try container.encodeIfPresent(hidden, forKey: .hidden)
        try container.encodeIfPresent(hideMessagesBefore, forKey: .hideMessagesBefore)
        try container.encode(id, forKey: .id)
        try container.encodeIfPresent(lastMessageAt, forKey: .lastMessageAt)
        try container.encodeIfPresent(memberCount, forKey: .memberCount)
        try container.encodeIfPresent(members, forKey: .members)
        try container.encodeIfPresent(muteExpiresAt, forKey: .muteExpiresAt)
        try container.encodeIfPresent(muted, forKey: .muted)
        try container.encodeIfPresent(ownCapabilities, forKey: .ownCapabilities)
        try container.encodeIfPresent(team, forKey: .team)
        try container.encodeIfPresent(truncatedAt, forKey: .truncatedAt)
        try container.encodeIfPresent(truncatedBy, forKey: .truncatedBy)
        try container.encode(type, forKey: .type)
        try container.encode(updatedAt, forKey: .updatedAt)
    }
}

