//
// Reaction.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
/** Represents user reaction to a message */

public struct Reaction: Codable, JSONEncodable, Hashable {
    /** Date/time of creation */
    public var createdAt: Date
    public var custom: [String: RawJSON]
    /** ID of a message user reacted to */
    public var messageId: String
    /** Reaction score. If not specified reaction has score of 1 */
    public var score: Int
    /** The type of reaction (e.g. 'like', 'laugh', 'wow') */
    public var type: String
    /** Date/time of the last update */
    public var updatedAt: Date
    public var user: UserObject?
    /** ID of a user who reacted to a message */
    public var userId: String?

    public init(createdAt: Date, custom: [String: RawJSON], messageId: String, score: Int, type: String, updatedAt: Date, user: UserObject? = nil, userId: String? = nil) {
        self.createdAt = createdAt
        self.custom = custom
        self.messageId = messageId
        self.score = score
        self.type = type
        self.updatedAt = updatedAt
        self.user = user
        self.userId = userId
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case createdAt = "created_at"
        case custom
        case messageId = "message_id"
        case score
        case type
        case updatedAt = "updated_at"
        case user
        case userId = "user_id"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(createdAt, forKey: .createdAt)
        try container.encode(custom, forKey: .custom)
        try container.encode(messageId, forKey: .messageId)
        try container.encode(score, forKey: .score)
        try container.encode(type, forKey: .type)
        try container.encode(updatedAt, forKey: .updatedAt)
        try container.encodeIfPresent(user, forKey: .user)
        try container.encodeIfPresent(userId, forKey: .userId)
    }
}

