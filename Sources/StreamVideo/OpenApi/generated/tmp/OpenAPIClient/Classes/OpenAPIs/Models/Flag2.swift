//
// Flag2.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation


public struct Flag2: Codable, JSONEncodable, Hashable {
    public var createdAt: Date
    public var custom: [String: RawJSON]?
    public var entityCreatorId: String?
    public var entityId: String
    public var entityType: String
    public var labels: [String]?
    public var moderationPayload: ModerationPayload?
    public var moderationPayloadHash: String?
    public var reason: String?
    public var result: [[String: RawJSON]]
    public var reviewQueueItemId: String?
    public var type: String?
    public var updatedAt: Date
    public var user: UserObject?

    public init(createdAt: Date, custom: [String: RawJSON]? = nil, entityCreatorId: String? = nil, entityId: String, entityType: String, labels: [String]? = nil, moderationPayload: ModerationPayload? = nil, moderationPayloadHash: String? = nil, reason: String? = nil, result: [[String: RawJSON]], reviewQueueItemId: String? = nil, type: String? = nil, updatedAt: Date, user: UserObject? = nil) {
        self.createdAt = createdAt
        self.custom = custom
        self.entityCreatorId = entityCreatorId
        self.entityId = entityId
        self.entityType = entityType
        self.labels = labels
        self.moderationPayload = moderationPayload
        self.moderationPayloadHash = moderationPayloadHash
        self.reason = reason
        self.result = result
        self.reviewQueueItemId = reviewQueueItemId
        self.type = type
        self.updatedAt = updatedAt
        self.user = user
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case createdAt = "created_at"
        case custom
        case entityCreatorId = "entity_creator_id"
        case entityId = "entity_id"
        case entityType = "entity_type"
        case labels
        case moderationPayload = "moderation_payload"
        case moderationPayloadHash = "moderation_payload_hash"
        case reason
        case result
        case reviewQueueItemId = "review_queue_item_id"
        case type
        case updatedAt = "updated_at"
        case user
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(createdAt, forKey: .createdAt)
        try container.encodeIfPresent(custom, forKey: .custom)
        try container.encodeIfPresent(entityCreatorId, forKey: .entityCreatorId)
        try container.encode(entityId, forKey: .entityId)
        try container.encode(entityType, forKey: .entityType)
        try container.encodeIfPresent(labels, forKey: .labels)
        try container.encodeIfPresent(moderationPayload, forKey: .moderationPayload)
        try container.encodeIfPresent(moderationPayloadHash, forKey: .moderationPayloadHash)
        try container.encodeIfPresent(reason, forKey: .reason)
        try container.encode(result, forKey: .result)
        try container.encodeIfPresent(reviewQueueItemId, forKey: .reviewQueueItemId)
        try container.encodeIfPresent(type, forKey: .type)
        try container.encode(updatedAt, forKey: .updatedAt)
        try container.encodeIfPresent(user, forKey: .user)
    }
}

