//
// EnrichedReaction.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation


public struct EnrichedReaction: Codable, JSONEncodable, Hashable {
    public var activityId: String
    public var childrenCounts: [String: Int]?
    public var createdAt: [String: RawJSON]?
    public var data: [String: RawJSON]?
    public var id: String?
    public var kind: String
    public var latestChildren: [String: [EnrichedReaction]]?
    public var ownChildren: [String: [EnrichedReaction]]?
    public var parent: String?
    public var targetFeeds: [String]?
    public var updatedAt: [String: RawJSON]?
    public var user: ModelData?
    public var userId: String

    public init(activityId: String, childrenCounts: [String: Int]? = nil, createdAt: [String: RawJSON]? = nil, data: [String: RawJSON]? = nil, id: String? = nil, kind: String, latestChildren: [String: [EnrichedReaction]]? = nil, ownChildren: [String: [EnrichedReaction]]? = nil, parent: String? = nil, targetFeeds: [String]? = nil, updatedAt: [String: RawJSON]? = nil, user: ModelData? = nil, userId: String) {
        self.activityId = activityId
        self.childrenCounts = childrenCounts
        self.createdAt = createdAt
        self.data = data
        self.id = id
        self.kind = kind
        self.latestChildren = latestChildren
        self.ownChildren = ownChildren
        self.parent = parent
        self.targetFeeds = targetFeeds
        self.updatedAt = updatedAt
        self.user = user
        self.userId = userId
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case activityId = "activity_id"
        case childrenCounts = "children_counts"
        case createdAt = "created_at"
        case data
        case id
        case kind
        case latestChildren = "latest_children"
        case ownChildren = "own_children"
        case parent
        case targetFeeds = "target_feeds"
        case updatedAt = "updated_at"
        case user
        case userId = "user_id"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(activityId, forKey: .activityId)
        try container.encodeIfPresent(childrenCounts, forKey: .childrenCounts)
        try container.encodeIfPresent(createdAt, forKey: .createdAt)
        try container.encodeIfPresent(data, forKey: .data)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encode(kind, forKey: .kind)
        try container.encodeIfPresent(latestChildren, forKey: .latestChildren)
        try container.encodeIfPresent(ownChildren, forKey: .ownChildren)
        try container.encodeIfPresent(parent, forKey: .parent)
        try container.encodeIfPresent(targetFeeds, forKey: .targetFeeds)
        try container.encodeIfPresent(updatedAt, forKey: .updatedAt)
        try container.encodeIfPresent(user, forKey: .user)
        try container.encode(userId, forKey: .userId)
    }
}

