//
// EnrichedActivity.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation


public struct EnrichedActivity: Codable, JSONEncodable, Hashable {
    public var actor: ModelData?
    public var foreignId: String?
    public var id: String?
    public var latestReactions: [String: [EnrichedReaction]]?
    public var object: ModelData?
    public var origin: ModelData?
    public var ownReactions: [String: [EnrichedReaction]]?
    public var reactionCounts: [String: Int]?
    public var score: Float?
    public var target: ModelData?
    public var time: [String: RawJSON]?
    public var to: [String]?
    public var verb: String?

    public init(actor: ModelData? = nil, foreignId: String? = nil, id: String? = nil, latestReactions: [String: [EnrichedReaction]]? = nil, object: ModelData? = nil, origin: ModelData? = nil, ownReactions: [String: [EnrichedReaction]]? = nil, reactionCounts: [String: Int]? = nil, score: Float? = nil, target: ModelData? = nil, time: [String: RawJSON]? = nil, to: [String]? = nil, verb: String? = nil) {
        self.actor = actor
        self.foreignId = foreignId
        self.id = id
        self.latestReactions = latestReactions
        self.object = object
        self.origin = origin
        self.ownReactions = ownReactions
        self.reactionCounts = reactionCounts
        self.score = score
        self.target = target
        self.time = time
        self.to = to
        self.verb = verb
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case actor
        case foreignId = "foreign_id"
        case id
        case latestReactions = "latest_reactions"
        case object
        case origin
        case ownReactions = "own_reactions"
        case reactionCounts = "reaction_counts"
        case score
        case target
        case time
        case to
        case verb
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(actor, forKey: .actor)
        try container.encodeIfPresent(foreignId, forKey: .foreignId)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(latestReactions, forKey: .latestReactions)
        try container.encodeIfPresent(object, forKey: .object)
        try container.encodeIfPresent(origin, forKey: .origin)
        try container.encodeIfPresent(ownReactions, forKey: .ownReactions)
        try container.encodeIfPresent(reactionCounts, forKey: .reactionCounts)
        try container.encodeIfPresent(score, forKey: .score)
        try container.encodeIfPresent(target, forKey: .target)
        try container.encodeIfPresent(time, forKey: .time)
        try container.encodeIfPresent(to, forKey: .to)
        try container.encodeIfPresent(verb, forKey: .verb)
    }
}

