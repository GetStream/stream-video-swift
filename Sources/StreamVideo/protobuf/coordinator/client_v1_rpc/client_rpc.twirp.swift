//
// Copyright Â© 2023 Stream.io Inc. All rights reserved.
//

// Generated by protoc-gen-siwft-twirp. DO NOT EDIT
import Foundation
import SwiftProtobuf

class Stream_Video_Coordinator_ClientV1Rpc_ClientRPC: @unchecked Sendable {
    private let httpClient: HTTPClient
    let hostname: String
    var token: String
    let apiKey: String
    let syncQueue = DispatchQueue(label: "Stream_Video_Coordinator_ClientV1Rpc_ClientRPC", qos: .userInitiated)
    let pathPrefix: String = "/stream.video.coordinator.client_v1_rpc.ClientRPC/"
    init(httpClient: HTTPClient, apiKey: String, hostname: String, token: String) {
        self.httpClient = httpClient
        self.hostname = hostname
        self.token = token
        self.apiKey = apiKey
    }

    func createCall(createCallRequest: Stream_Video_Coordinator_ClientV1Rpc_CreateCallRequest) async throws
        -> Stream_Video_Coordinator_ClientV1Rpc_CreateCallResponse {
        try await execute(request: createCallRequest, path: "CreateCall")
    }

    func getOrCreateCall(getOrCreateCallRequest: Stream_Video_Coordinator_ClientV1Rpc_GetOrCreateCallRequest) async throws
        -> Stream_Video_Coordinator_ClientV1Rpc_GetOrCreateCallResponse {
        try await execute(request: getOrCreateCallRequest, path: "GetOrCreateCall")
    }

    func joinCall(joinCallRequest: Stream_Video_Coordinator_ClientV1Rpc_JoinCallRequest) async throws
        -> Stream_Video_Coordinator_ClientV1Rpc_JoinCallResponse {
        try await execute(request: joinCallRequest, path: "JoinCall")
    }

    func getCallEdgeServer(getCallEdgeServerRequest: Stream_Video_Coordinator_ClientV1Rpc_GetCallEdgeServerRequest) async throws
        -> Stream_Video_Coordinator_ClientV1Rpc_GetCallEdgeServerResponse {
        try await execute(request: getCallEdgeServerRequest, path: "GetCallEdgeServer")
    }

    func updateCall(updateCallRequest: Stream_Video_Coordinator_ClientV1Rpc_UpdateCallRequest) async throws
        -> Stream_Video_Coordinator_ClientV1Rpc_UpdateCallResponse {
        try await execute(request: updateCallRequest, path: "UpdateCall")
    }

    func updateCallPermissions(
        updateCallPermissionsRequest: Stream_Video_Coordinator_ClientV1Rpc_UpdateCallPermissionsRequest
    ) async throws
        -> Stream_Video_Coordinator_ClientV1Rpc_UpdateCallPermissionsResponse {
        try await execute(request: updateCallPermissionsRequest, path: "UpdateCallPermissions")
    }

    func endCall(endCallRequest: Stream_Video_Coordinator_ClientV1Rpc_EndCallRequest) async throws
        -> Stream_Video_Coordinator_ClientV1Rpc_EndCallResponse {
        try await execute(request: endCallRequest, path: "EndCall")
    }

    func queryCalls(queryCallsRequest: Stream_Video_Coordinator_ClientV1Rpc_QueryCallsRequest) async throws
        -> Stream_Video_Coordinator_ClientV1Rpc_QueryCallsResponse {
        try await execute(request: queryCallsRequest, path: "QueryCalls")
    }

    func queryMembers(queryMembersRequest: Stream_Video_Coordinator_ClientV1Rpc_QueryMembersRequest) async throws
        -> Stream_Video_Coordinator_ClientV1Rpc_QueryMembersResponse {
        try await execute(request: queryMembersRequest, path: "QueryMembers")
    }

    func createDevice(createDeviceRequest: Stream_Video_Coordinator_ClientV1Rpc_CreateDeviceRequest) async throws
        -> Stream_Video_Coordinator_ClientV1Rpc_CreateDeviceResponse {
        try await execute(request: createDeviceRequest, path: "CreateDevice")
    }

    func deleteDevice(deleteDeviceRequest: Stream_Video_Coordinator_ClientV1Rpc_DeleteDeviceRequest) async throws
        -> Stream_Video_Coordinator_ClientV1Rpc_DeleteDeviceResponse {
        try await execute(request: deleteDeviceRequest, path: "DeleteDevice")
    }

    func queryDevices(queryDevicesRequest: Stream_Video_Coordinator_ClientV1Rpc_QueryDevicesRequest) async throws
        -> Stream_Video_Coordinator_ClientV1Rpc_QueryDevicesResponse {
        try await execute(request: queryDevicesRequest, path: "QueryDevices")
    }

    func startBroadcast(startBroadcastRequest: Stream_Video_Coordinator_ClientV1Rpc_StartBroadcastRequest) async throws
        -> Stream_Video_Coordinator_ClientV1Rpc_StartBroadcastResponse {
        try await execute(request: startBroadcastRequest, path: "StartBroadcast")
    }

    func stopBroadcast(stopBroadcastRequest: Stream_Video_Coordinator_ClientV1Rpc_StopBroadcastRequest) async throws
        -> Stream_Video_Coordinator_ClientV1Rpc_StopBroadcastResponse {
        try await execute(request: stopBroadcastRequest, path: "StopBroadcast")
    }

    func startRecording(startRecordingRequest: Stream_Video_Coordinator_ClientV1Rpc_StartRecordingRequest) async throws
        -> Stream_Video_Coordinator_ClientV1Rpc_StartRecordingResponse {
        try await execute(request: startRecordingRequest, path: "StartRecording")
    }

    func stopRecording(stopRecordingRequest: Stream_Video_Coordinator_ClientV1Rpc_StopRecordingRequest) async throws
        -> Stream_Video_Coordinator_ClientV1Rpc_StopRecordingResponse {
        try await execute(request: stopRecordingRequest, path: "StopRecording")
    }

    func upsertCallMembers(upsertCallMembersRequest: Stream_Video_Coordinator_ClientV1Rpc_UpsertCallMembersRequest) async throws
        -> Stream_Video_Coordinator_ClientV1Rpc_UpsertCallMembersResponse {
        try await execute(request: upsertCallMembersRequest, path: "UpsertCallMembers")
    }

    func deleteCallMembers(deleteCallMembersRequest: Stream_Video_Coordinator_ClientV1Rpc_DeleteCallMembersRequest) async throws
        -> Stream_Video_Coordinator_ClientV1Rpc_DeleteCallMembersResponse {
        try await execute(request: deleteCallMembersRequest, path: "DeleteCallMembers")
    }

    func sendEvent(sendEventRequest: Stream_Video_Coordinator_ClientV1Rpc_SendEventRequest) async throws
        -> Stream_Video_Coordinator_ClientV1Rpc_SendEventResponse {
        try await execute(request: sendEventRequest, path: "SendEvent")
    }

    func sendCustomEvent(sendCustomEventRequest: Stream_Video_Coordinator_ClientV1Rpc_SendCustomEventRequest) async throws
        -> Stream_Video_Coordinator_ClientV1Rpc_SendCustomEventResponse {
        try await execute(request: sendCustomEventRequest, path: "SendCustomEvent")
    }

    func queryUsers(queryUsersRequest: Stream_Video_Coordinator_ClientV1Rpc_QueryUsersRequest) async throws
        -> Stream_Video_Coordinator_ClientV1Rpc_QueryUsersResponse {
        try await execute(request: queryUsersRequest, path: "QueryUsers")
    }

    func upsertUsers(upsertUsersRequest: Stream_Video_Coordinator_ClientV1Rpc_UpsertUsersRequest) async throws
        -> Stream_Video_Coordinator_ClientV1Rpc_UpsertUsersResponse {
        try await execute(request: upsertUsersRequest, path: "UpsertUsers")
    }

    func reportCallStats(reportCallStatsRequest: Stream_Video_Coordinator_ClientV1Rpc_ReportCallStatsRequest) async throws
        -> Stream_Video_Coordinator_ClientV1Rpc_ReportCallStatsResponse {
        try await execute(request: reportCallStatsRequest, path: "ReportCallStats")
    }

    func reportCallStatEvent(
        reportCallStatEventRequest: Stream_Video_Coordinator_ClientV1Rpc_ReportCallStatEventRequest
    ) async throws
        -> Stream_Video_Coordinator_ClientV1Rpc_ReportCallStatEventResponse {
        try await execute(request: reportCallStatEventRequest, path: "ReportCallStatEvent")
    }

    func reviewCall(reviewCallRequest: Stream_Video_Coordinator_ClientV1Rpc_ReviewCallRequest) async throws
        -> Stream_Video_Coordinator_ClientV1Rpc_ReviewCallResponse {
        try await execute(request: reviewCallRequest, path: "ReviewCall")
    }

    func reportIssue(reportIssueRequest: Stream_Video_Coordinator_ClientV1Rpc_ReportIssueRequest) async throws
        -> Stream_Video_Coordinator_ClientV1Rpc_ReportIssueResponse {
        try await execute(request: reportIssueRequest, path: "ReportIssue")
    }

    func update(userToken: String) {
        syncQueue.async { [weak self] in
            self?.token = userToken
        }
    }

    private func execute<Request: ProtoModel, Response: ProtoModel>(request: Request, path: String) async throws -> Response {
        let requestData = try request.serializedData()
        var request = try makeRequest(for: path)
        request.httpBody = requestData
        let responseData = try await httpClient.execute(request: request)
        let response = try Response(serializedData: responseData)
        return response
    }

    private func makeRequest(for path: String) throws -> URLRequest {
        let url = hostname + pathPrefix + path + "?api_key=\(apiKey)"
        guard let url = URL(string: url) else {
            throw NSError(domain: "stream", code: 123)
        }
        var request = URLRequest(url: url)
        request.setValue("application/protobuf", forHTTPHeaderField: "Content-Type")
        request.setValue("Bearer \(token)", forHTTPHeaderField: "authorization")
        request.httpMethod = "POST"
        return request
    }
}
