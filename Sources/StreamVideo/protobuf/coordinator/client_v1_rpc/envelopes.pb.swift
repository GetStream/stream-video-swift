//
// Copyright Â© 2023 Stream.io Inc. All rights reserved.
//

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
private struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
    struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
    typealias Version = _2
}

/// CallEnvelope contains Call and all related information to it
/// Only used in reponse types that return a single call
struct Stream_Video_Coordinator_ClientV1Rpc_CallEnvelope {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// All users referenced in the response
    var users: [String: Stream_Video_Coordinator_UserV1_User] {
        get { _storage._users }
        set { _uniqueStorage()._users = newValue }
    }

    /// Call object
    var call: Stream_Video_Coordinator_CallV1_Call {
        get { _storage._call ?? Stream_Video_Coordinator_CallV1_Call() }
        set { _uniqueStorage()._call = newValue }
    }

    /// Returns true if `call` has been explicitly set.
    var hasCall: Bool { _storage._call != nil }
    /// Clears the value of `call`. Subsequent reads from it will return its default value.
    mutating func clearCall() { _uniqueStorage()._call = nil }

    /// Call details
    var details: Stream_Video_Coordinator_CallV1_CallDetails {
        get { _storage._details ?? Stream_Video_Coordinator_CallV1_CallDetails() }
        set { _uniqueStorage()._details = newValue }
    }

    /// Returns true if `details` has been explicitly set.
    var hasDetails: Bool { _storage._details != nil }
    /// Clears the value of `details`. Subsequent reads from it will return its default value.
    mutating func clearDetails() { _uniqueStorage()._details = nil }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    private var _storage = _StorageClass.defaultInstance
}

/// CallsEnvelope contains list of calls and all related information to them
/// Only used in response types that return list of calls
struct Stream_Video_Coordinator_ClientV1Rpc_CallsEnvelope {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// All users referenced in the response
    var users: [String: Stream_Video_Coordinator_UserV1_User] = [:]

    /// Ordered list of Call.call_cid
    var callCids: [String] = []

    /// Call objects, indexed by Call.call_cid
    var calls: [String: Stream_Video_Coordinator_CallV1_Call] = [:]

    /// Call details, indexed by Call.call_cid
    var details: [String: Stream_Video_Coordinator_CallV1_CallDetails] = [:]

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
}

/// CallsEnvelope contains list of members and all related information to them
/// Only used in response types that return list of members
struct Stream_Video_Coordinator_ClientV1Rpc_MembersEnvelope {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// All users referenced in the response
    var users: [String: Stream_Video_Coordinator_UserV1_User] = [:]

    /// Ordered list of Member.user_id
    var memberUserIds: [String] = []

    /// Map of members indexed by Member.user_id
    var members: [String: Stream_Video_Coordinator_MemberV1_Member] = [:]

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Stream_Video_Coordinator_ClientV1Rpc_CallEnvelope: @unchecked Sendable {}
extension Stream_Video_Coordinator_ClientV1Rpc_CallsEnvelope: @unchecked Sendable {}
extension Stream_Video_Coordinator_ClientV1Rpc_MembersEnvelope: @unchecked Sendable {}
#endif // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

private let _protobuf_package = "stream.video.coordinator.client_v1_rpc"

extension Stream_Video_Coordinator_ClientV1Rpc_CallEnvelope: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase,
    SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = _protobuf_package + ".CallEnvelope"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "users"),
        2: .same(proto: "call"),
        3: .same(proto: "details")
    ]

    fileprivate class _StorageClass {
        var _users: [String: Stream_Video_Coordinator_UserV1_User] = [:]
        var _call: Stream_Video_Coordinator_CallV1_Call?
        var _details: Stream_Video_Coordinator_CallV1_CallDetails?

        static let defaultInstance = _StorageClass()

        private init() {}

        init(copying source: _StorageClass) {
            _users = source._users
            _call = source._call
            _details = source._details
        }
    }

    fileprivate mutating func _uniqueStorage() -> _StorageClass {
        if !isKnownUniquelyReferenced(&_storage) {
            _storage = _StorageClass(copying: _storage)
        }
        return _storage
    }

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        _ = _uniqueStorage()
        try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
            while let fieldNumber = try decoder.nextFieldNumber() {
                // The use of inline closures is to circumvent an issue where the compiler
                // allocates stack space for every case branch when no optimizations are
                // enabled. https://github.com/apple/swift-protobuf/issues/1034
                switch fieldNumber {
                case 1: try { try decoder.decodeMapField(
                        fieldType: SwiftProtobuf._ProtobufMessageMap<
                            SwiftProtobuf.ProtobufString,
                            Stream_Video_Coordinator_UserV1_User
                        >.self,
                        value: &_storage._users
                    ) }()
                case 2: try { try decoder.decodeSingularMessageField(value: &_storage._call) }()
                case 3: try { try decoder.decodeSingularMessageField(value: &_storage._details) }()
                default: break
                }
            }
        }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every if/case branch local when no optimizations
            // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
            // https://github.com/apple/swift-protobuf/issues/1182
            if !_storage._users.isEmpty {
                try visitor.visitMapField(
                    fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString, Stream_Video_Coordinator_UserV1_User>
                        .self,
                    value: _storage._users,
                    fieldNumber: 1
                )
            }
            try { if let v = _storage._call {
                try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
            } }()
            try { if let v = _storage._details {
                try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
            } }()
        }
        try unknownFields.traverse(visitor: &visitor)
    }

    static func == (
        lhs: Stream_Video_Coordinator_ClientV1Rpc_CallEnvelope,
        rhs: Stream_Video_Coordinator_ClientV1Rpc_CallEnvelope
    ) -> Bool {
        if lhs._storage !== rhs._storage {
            let storagesAreEqual: Bool =
                withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
                    let _storage = _args.0
                    let rhs_storage = _args.1
                    if _storage._users != rhs_storage._users { return false }
                    if _storage._call != rhs_storage._call { return false }
                    if _storage._details != rhs_storage._details { return false }
                    return true
                }
            if !storagesAreEqual { return false }
        }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Stream_Video_Coordinator_ClientV1Rpc_CallsEnvelope: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase,
    SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = _protobuf_package + ".CallsEnvelope"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "users"),
        2: .standard(proto: "call_cids"),
        3: .same(proto: "calls"),
        4: .same(proto: "details")
    ]

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every case branch when no optimizations are
            // enabled. https://github.com/apple/swift-protobuf/issues/1034
            switch fieldNumber {
            case 1: try { try decoder.decodeMapField(
                    fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString, Stream_Video_Coordinator_UserV1_User>
                        .self,
                    value: &self.users
                ) }()
            case 2: try { try decoder.decodeRepeatedStringField(value: &self.callCids) }()
            case 3: try { try decoder.decodeMapField(
                    fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString, Stream_Video_Coordinator_CallV1_Call>
                        .self,
                    value: &self.calls
                ) }()
            case 4: try { try decoder.decodeMapField(
                    fieldType: SwiftProtobuf._ProtobufMessageMap<
                        SwiftProtobuf.ProtobufString,
                        Stream_Video_Coordinator_CallV1_CallDetails
                    >
                    .self,
                    value: &self.details
                ) }()
            default: break
            }
        }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if !users.isEmpty {
            try visitor.visitMapField(
                fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString, Stream_Video_Coordinator_UserV1_User>
                    .self,
                value: users,
                fieldNumber: 1
            )
        }
        if !callCids.isEmpty {
            try visitor.visitRepeatedStringField(value: callCids, fieldNumber: 2)
        }
        if !calls.isEmpty {
            try visitor.visitMapField(
                fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString, Stream_Video_Coordinator_CallV1_Call>
                    .self,
                value: calls,
                fieldNumber: 3
            )
        }
        if !details.isEmpty {
            try visitor.visitMapField(
                fieldType: SwiftProtobuf._ProtobufMessageMap<
                    SwiftProtobuf.ProtobufString,
                    Stream_Video_Coordinator_CallV1_CallDetails
                >
                .self,
                value: details,
                fieldNumber: 4
            )
        }
        try unknownFields.traverse(visitor: &visitor)
    }

    static func == (
        lhs: Stream_Video_Coordinator_ClientV1Rpc_CallsEnvelope,
        rhs: Stream_Video_Coordinator_ClientV1Rpc_CallsEnvelope
    ) -> Bool {
        if lhs.users != rhs.users { return false }
        if lhs.callCids != rhs.callCids { return false }
        if lhs.calls != rhs.calls { return false }
        if lhs.details != rhs.details { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Stream_Video_Coordinator_ClientV1Rpc_MembersEnvelope: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase,
    SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = _protobuf_package + ".MembersEnvelope"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "users"),
        2: .standard(proto: "member_user_ids"),
        3: .same(proto: "members")
    ]

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every case branch when no optimizations are
            // enabled. https://github.com/apple/swift-protobuf/issues/1034
            switch fieldNumber {
            case 1: try { try decoder.decodeMapField(
                    fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString, Stream_Video_Coordinator_UserV1_User>
                        .self,
                    value: &self.users
                ) }()
            case 2: try { try decoder.decodeRepeatedStringField(value: &self.memberUserIds) }()
            case 3: try { try decoder.decodeMapField(
                    fieldType: SwiftProtobuf._ProtobufMessageMap<
                        SwiftProtobuf.ProtobufString,
                        Stream_Video_Coordinator_MemberV1_Member
                    >.self,
                    value: &self.members
                ) }()
            default: break
            }
        }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if !users.isEmpty {
            try visitor.visitMapField(
                fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString, Stream_Video_Coordinator_UserV1_User>
                    .self,
                value: users,
                fieldNumber: 1
            )
        }
        if !memberUserIds.isEmpty {
            try visitor.visitRepeatedStringField(value: memberUserIds, fieldNumber: 2)
        }
        if !members.isEmpty {
            try visitor.visitMapField(
                fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString, Stream_Video_Coordinator_MemberV1_Member>
                    .self,
                value: members,
                fieldNumber: 3
            )
        }
        try unknownFields.traverse(visitor: &visitor)
    }

    static func == (
        lhs: Stream_Video_Coordinator_ClientV1Rpc_MembersEnvelope,
        rhs: Stream_Video_Coordinator_ClientV1Rpc_MembersEnvelope
    ) -> Bool {
        if lhs.users != rhs.users { return false }
        if lhs.memberUserIds != rhs.memberUserIds { return false }
        if lhs.members != rhs.members { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}
