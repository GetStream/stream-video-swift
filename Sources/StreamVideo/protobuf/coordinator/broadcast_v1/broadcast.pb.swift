//
// Copyright Â© 2023 Stream.io Inc. All rights reserved.
//

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
private struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
    struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
    typealias Version = _2
}

enum Stream_Video_Coordinator_BroadcastV1_Codec: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case h264Unspecified // = 0
    case vp8 // = 1
    case vp9 // = 2
    case UNRECOGNIZED(Int)

    init() {
        self = .h264Unspecified
    }

    init?(rawValue: Int) {
        switch rawValue {
        case 0: self = .h264Unspecified
        case 1: self = .vp8
        case 2: self = .vp9
        default: self = .UNRECOGNIZED(rawValue)
        }
    }

    var rawValue: Int {
        switch self {
        case .h264Unspecified: return 0
        case .vp8: return 1
        case .vp9: return 2
        case let .UNRECOGNIZED(i): return i
        }
    }
}

#if swift(>=4.2)

extension Stream_Video_Coordinator_BroadcastV1_Codec: CaseIterable {
    // The compiler won't synthesize support with the UNRECOGNIZED case.
    static var allCases: [Stream_Video_Coordinator_BroadcastV1_Codec] = [
        .h264Unspecified,
        .vp8,
        .vp9
    ]
}

#endif // swift(>=4.2)

struct Stream_Video_Coordinator_BroadcastV1_RTMPOptions {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var urls: [String] = []

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
}

struct Stream_Video_Coordinator_BroadcastV1_Broadcast {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var rtmp: Stream_Video_Coordinator_BroadcastV1_RTMPOptions {
        get { _rtmp ?? Stream_Video_Coordinator_BroadcastV1_RTMPOptions() }
        set { _rtmp = newValue }
    }

    /// Returns true if `rtmp` has been explicitly set.
    var hasRtmp: Bool { self._rtmp != nil }
    /// Clears the value of `rtmp`. Subsequent reads from it will return its default value.
    mutating func clearRtmp() { _rtmp = nil }

    var hlsURL: String = String()

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    private var _rtmp: Stream_Video_Coordinator_BroadcastV1_RTMPOptions?
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Stream_Video_Coordinator_BroadcastV1_Codec: @unchecked Sendable {}
extension Stream_Video_Coordinator_BroadcastV1_RTMPOptions: @unchecked Sendable {}
extension Stream_Video_Coordinator_BroadcastV1_Broadcast: @unchecked Sendable {}
#endif // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

private let _protobuf_package = "stream.video.coordinator.broadcast_v1"

extension Stream_Video_Coordinator_BroadcastV1_Codec: SwiftProtobuf._ProtoNameProviding {
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        0: .same(proto: "CODEC_H264_UNSPECIFIED"),
        1: .same(proto: "CODEC_VP8"),
        2: .same(proto: "CODEC_VP9")
    ]
}

extension Stream_Video_Coordinator_BroadcastV1_RTMPOptions: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase,
    SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = _protobuf_package + ".RTMPOptions"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "urls")
    ]

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every case branch when no optimizations are
            // enabled. https://github.com/apple/swift-protobuf/issues/1034
            switch fieldNumber {
            case 1: try { try decoder.decodeRepeatedStringField(value: &self.urls) }()
            default: break
            }
        }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if !urls.isEmpty {
            try visitor.visitRepeatedStringField(value: urls, fieldNumber: 1)
        }
        try unknownFields.traverse(visitor: &visitor)
    }

    static func == (
        lhs: Stream_Video_Coordinator_BroadcastV1_RTMPOptions,
        rhs: Stream_Video_Coordinator_BroadcastV1_RTMPOptions
    ) -> Bool {
        if lhs.urls != rhs.urls { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Stream_Video_Coordinator_BroadcastV1_Broadcast: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase,
    SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = _protobuf_package + ".Broadcast"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "rtmp"),
        2: .standard(proto: "hls_url")
    ]

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every case branch when no optimizations are
            // enabled. https://github.com/apple/swift-protobuf/issues/1034
            switch fieldNumber {
            case 1: try { try decoder.decodeSingularMessageField(value: &self._rtmp) }()
            case 2: try { try decoder.decodeSingularStringField(value: &self.hlsURL) }()
            default: break
            }
        }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every if/case branch local when no optimizations
        // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
        // https://github.com/apple/swift-protobuf/issues/1182
        try { if let v = self._rtmp {
            try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
        } }()
        if !hlsURL.isEmpty {
            try visitor.visitSingularStringField(value: hlsURL, fieldNumber: 2)
        }
        try unknownFields.traverse(visitor: &visitor)
    }

    static func == (
        lhs: Stream_Video_Coordinator_BroadcastV1_Broadcast,
        rhs: Stream_Video_Coordinator_BroadcastV1_Broadcast
    ) -> Bool {
        if lhs._rtmp != rhs._rtmp { return false }
        if lhs.hlsURL != rhs.hlsURL { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}
