//
// Copyright Â© 2023 Stream.io Inc. All rights reserved.
//

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
private struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
    struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
    typealias Version = _2
}

/// those who are online in the call
struct Stream_Video_Coordinator_ParticipantV1_Participant {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var user: Stream_Video_Coordinator_UserV1_User {
        get { _storage._user ?? Stream_Video_Coordinator_UserV1_User() }
        set { _uniqueStorage()._user = newValue }
    }

    /// Returns true if `user` has been explicitly set.
    var hasUser: Bool { _storage._user != nil }
    /// Clears the value of `user`. Subsequent reads from it will return its default value.
    mutating func clearUser() { _uniqueStorage()._user = nil }

    var role: String {
        get { _storage._role }
        set { _uniqueStorage()._role = newValue }
    }

    var online: Bool {
        get { _storage._online }
        set { _uniqueStorage()._online = newValue }
    }

    var customJson: Data {
        get { _storage._customJson }
        set { _uniqueStorage()._customJson = newValue }
    }

    var video: Bool {
        get { _storage._video }
        set { _uniqueStorage()._video = newValue }
    }

    var audio: Bool {
        get { _storage._audio }
        set { _uniqueStorage()._audio = newValue }
    }

    /// Call creation date.
    var createdAt: SwiftProtobuf.Google_Protobuf_Timestamp {
        get { _storage._createdAt ?? SwiftProtobuf.Google_Protobuf_Timestamp() }
        set { _uniqueStorage()._createdAt = newValue }
    }

    /// Returns true if `createdAt` has been explicitly set.
    var hasCreatedAt: Bool { _storage._createdAt != nil }
    /// Clears the value of `createdAt`. Subsequent reads from it will return its default value.
    mutating func clearCreatedAt() { _uniqueStorage()._createdAt = nil }

    /// Call last update date.
    var updatedAt: SwiftProtobuf.Google_Protobuf_Timestamp {
        get { _storage._updatedAt ?? SwiftProtobuf.Google_Protobuf_Timestamp() }
        set { _uniqueStorage()._updatedAt = newValue }
    }

    /// Returns true if `updatedAt` has been explicitly set.
    var hasUpdatedAt: Bool { _storage._updatedAt != nil }
    /// Clears the value of `updatedAt`. Subsequent reads from it will return its default value.
    mutating func clearUpdatedAt() { _uniqueStorage()._updatedAt = nil }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    private var _storage = _StorageClass.defaultInstance
}

struct Stream_Video_Coordinator_ParticipantV1_ParticipantRequest {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var userID: String = String()

    var role: String = String()

    /// Call custom data
    var customJson: Data = Data()

    /// Call creation date.
    var createdAt: SwiftProtobuf.Google_Protobuf_Timestamp {
        get { _createdAt ?? SwiftProtobuf.Google_Protobuf_Timestamp() }
        set { _createdAt = newValue }
    }

    /// Returns true if `createdAt` has been explicitly set.
    var hasCreatedAt: Bool { self._createdAt != nil }
    /// Clears the value of `createdAt`. Subsequent reads from it will return its default value.
    mutating func clearCreatedAt() { _createdAt = nil }

    /// Call last update date.
    var updatedAt: SwiftProtobuf.Google_Protobuf_Timestamp {
        get { _updatedAt ?? SwiftProtobuf.Google_Protobuf_Timestamp() }
        set { _updatedAt = newValue }
    }

    /// Returns true if `updatedAt` has been explicitly set.
    var hasUpdatedAt: Bool { self._updatedAt != nil }
    /// Clears the value of `updatedAt`. Subsequent reads from it will return its default value.
    mutating func clearUpdatedAt() { _updatedAt = nil }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _createdAt: SwiftProtobuf.Google_Protobuf_Timestamp?
    fileprivate var _updatedAt: SwiftProtobuf.Google_Protobuf_Timestamp?
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Stream_Video_Coordinator_ParticipantV1_Participant: @unchecked Sendable {}
extension Stream_Video_Coordinator_ParticipantV1_ParticipantRequest: @unchecked Sendable {}
#endif // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

private let _protobuf_package = "stream.video.coordinator.participant_v1"

extension Stream_Video_Coordinator_ParticipantV1_Participant: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase,
    SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = _protobuf_package + ".Participant"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "user"),
        2: .same(proto: "role"),
        3: .same(proto: "online"),
        4: .standard(proto: "custom_json"),
        5: .same(proto: "video"),
        6: .same(proto: "audio"),
        7: .standard(proto: "created_at"),
        8: .standard(proto: "updated_at")
    ]

    fileprivate class _StorageClass {
        var _user: Stream_Video_Coordinator_UserV1_User?
        var _role: String = String()
        var _online: Bool = false
        var _customJson: Data = Data()
        var _video: Bool = false
        var _audio: Bool = false
        var _createdAt: SwiftProtobuf.Google_Protobuf_Timestamp?
        var _updatedAt: SwiftProtobuf.Google_Protobuf_Timestamp?

        static let defaultInstance = _StorageClass()

        private init() {}

        init(copying source: _StorageClass) {
            _user = source._user
            _role = source._role
            _online = source._online
            _customJson = source._customJson
            _video = source._video
            _audio = source._audio
            _createdAt = source._createdAt
            _updatedAt = source._updatedAt
        }
    }

    fileprivate mutating func _uniqueStorage() -> _StorageClass {
        if !isKnownUniquelyReferenced(&_storage) {
            _storage = _StorageClass(copying: _storage)
        }
        return _storage
    }

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        _ = _uniqueStorage()
        try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
            while let fieldNumber = try decoder.nextFieldNumber() {
                // The use of inline closures is to circumvent an issue where the compiler
                // allocates stack space for every case branch when no optimizations are
                // enabled. https://github.com/apple/swift-protobuf/issues/1034
                switch fieldNumber {
                case 1: try { try decoder.decodeSingularMessageField(value: &_storage._user) }()
                case 2: try { try decoder.decodeSingularStringField(value: &_storage._role) }()
                case 3: try { try decoder.decodeSingularBoolField(value: &_storage._online) }()
                case 4: try { try decoder.decodeSingularBytesField(value: &_storage._customJson) }()
                case 5: try { try decoder.decodeSingularBoolField(value: &_storage._video) }()
                case 6: try { try decoder.decodeSingularBoolField(value: &_storage._audio) }()
                case 7: try { try decoder.decodeSingularMessageField(value: &_storage._createdAt) }()
                case 8: try { try decoder.decodeSingularMessageField(value: &_storage._updatedAt) }()
                default: break
                }
            }
        }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every if/case branch local when no optimizations
            // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
            // https://github.com/apple/swift-protobuf/issues/1182
            try { if let v = _storage._user {
                try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
            } }()
            if !_storage._role.isEmpty {
                try visitor.visitSingularStringField(value: _storage._role, fieldNumber: 2)
            }
            if _storage._online != false {
                try visitor.visitSingularBoolField(value: _storage._online, fieldNumber: 3)
            }
            if !_storage._customJson.isEmpty {
                try visitor.visitSingularBytesField(value: _storage._customJson, fieldNumber: 4)
            }
            if _storage._video != false {
                try visitor.visitSingularBoolField(value: _storage._video, fieldNumber: 5)
            }
            if _storage._audio != false {
                try visitor.visitSingularBoolField(value: _storage._audio, fieldNumber: 6)
            }
            try { if let v = _storage._createdAt {
                try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
            } }()
            try { if let v = _storage._updatedAt {
                try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
            } }()
        }
        try unknownFields.traverse(visitor: &visitor)
    }

    static func == (
        lhs: Stream_Video_Coordinator_ParticipantV1_Participant,
        rhs: Stream_Video_Coordinator_ParticipantV1_Participant
    ) -> Bool {
        if lhs._storage !== rhs._storage {
            let storagesAreEqual: Bool =
                withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
                    let _storage = _args.0
                    let rhs_storage = _args.1
                    if _storage._user != rhs_storage._user { return false }
                    if _storage._role != rhs_storage._role { return false }
                    if _storage._online != rhs_storage._online { return false }
                    if _storage._customJson != rhs_storage._customJson { return false }
                    if _storage._video != rhs_storage._video { return false }
                    if _storage._audio != rhs_storage._audio { return false }
                    if _storage._createdAt != rhs_storage._createdAt { return false }
                    if _storage._updatedAt != rhs_storage._updatedAt { return false }
                    return true
                }
            if !storagesAreEqual { return false }
        }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Stream_Video_Coordinator_ParticipantV1_ParticipantRequest: SwiftProtobuf.Message,
    SwiftProtobuf._MessageImplementationBase,
    SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = _protobuf_package + ".ParticipantRequest"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .standard(proto: "user_id"),
        2: .same(proto: "role"),
        3: .standard(proto: "custom_json"),
        4: .standard(proto: "created_at"),
        5: .standard(proto: "updated_at")
    ]

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every case branch when no optimizations are
            // enabled. https://github.com/apple/swift-protobuf/issues/1034
            switch fieldNumber {
            case 1: try { try decoder.decodeSingularStringField(value: &self.userID) }()
            case 2: try { try decoder.decodeSingularStringField(value: &self.role) }()
            case 3: try { try decoder.decodeSingularBytesField(value: &self.customJson) }()
            case 4: try { try decoder.decodeSingularMessageField(value: &self._createdAt) }()
            case 5: try { try decoder.decodeSingularMessageField(value: &self._updatedAt) }()
            default: break
            }
        }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every if/case branch local when no optimizations
        // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
        // https://github.com/apple/swift-protobuf/issues/1182
        if !userID.isEmpty {
            try visitor.visitSingularStringField(value: userID, fieldNumber: 1)
        }
        if !role.isEmpty {
            try visitor.visitSingularStringField(value: role, fieldNumber: 2)
        }
        if !customJson.isEmpty {
            try visitor.visitSingularBytesField(value: customJson, fieldNumber: 3)
        }
        try { if let v = self._createdAt {
            try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
        } }()
        try { if let v = self._updatedAt {
            try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
        } }()
        try unknownFields.traverse(visitor: &visitor)
    }

    static func == (
        lhs: Stream_Video_Coordinator_ParticipantV1_ParticipantRequest,
        rhs: Stream_Video_Coordinator_ParticipantV1_ParticipantRequest
    ) -> Bool {
        if lhs.userID != rhs.userID { return false }
        if lhs.role != rhs.role { return false }
        if lhs.customJson != rhs.customJson { return false }
        if lhs._createdAt != rhs._createdAt { return false }
        if lhs._updatedAt != rhs._updatedAt { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}
