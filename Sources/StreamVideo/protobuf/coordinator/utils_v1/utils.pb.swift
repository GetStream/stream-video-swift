//
// Copyright Â© 2023 Stream.io Inc. All rights reserved.
//

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
private struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
    struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
    typealias Version = _2
}

enum Stream_Video_Coordinator_UtilsV1_Direction: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case unspecified // = 0
    case desc // = -1
    case asc // = 1
    case UNRECOGNIZED(Int)

    init() {
        self = .unspecified
    }

    init?(rawValue: Int) {
        switch rawValue {
        case -1: self = .desc
        case 0: self = .unspecified
        case 1: self = .asc
        default: self = .UNRECOGNIZED(rawValue)
        }
    }

    var rawValue: Int {
        switch self {
        case .desc: return -1
        case .unspecified: return 0
        case .asc: return 1
        case let .UNRECOGNIZED(i): return i
        }
    }
}

#if swift(>=4.2)

extension Stream_Video_Coordinator_UtilsV1_Direction: CaseIterable {
    // The compiler won't synthesize support with the UNRECOGNIZED case.
    static var allCases: [Stream_Video_Coordinator_UtilsV1_Direction] = [
        .unspecified,
        .desc,
        .asc
    ]
}

#endif // swift(>=4.2)

struct Stream_Video_Coordinator_UtilsV1_Sort {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var field: String = String()

    var direction: Stream_Video_Coordinator_UtilsV1_Direction = .unspecified

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Stream_Video_Coordinator_UtilsV1_Direction: @unchecked Sendable {}
extension Stream_Video_Coordinator_UtilsV1_Sort: @unchecked Sendable {}
#endif // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

private let _protobuf_package = "stream.video.coordinator.utils_v1"

extension Stream_Video_Coordinator_UtilsV1_Direction: SwiftProtobuf._ProtoNameProviding {
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        -1: .same(proto: "DIRECTION_DESC"),
        0: .same(proto: "DIRECTION_UNSPECIFIED"),
        1: .same(proto: "DIRECTION_ASC")
    ]
}

extension Stream_Video_Coordinator_UtilsV1_Sort: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase,
    SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = _protobuf_package + ".Sort"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "field"),
        2: .same(proto: "direction")
    ]

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every case branch when no optimizations are
            // enabled. https://github.com/apple/swift-protobuf/issues/1034
            switch fieldNumber {
            case 1: try { try decoder.decodeSingularStringField(value: &self.field) }()
            case 2: try { try decoder.decodeSingularEnumField(value: &self.direction) }()
            default: break
            }
        }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if !field.isEmpty {
            try visitor.visitSingularStringField(value: field, fieldNumber: 1)
        }
        if direction != .unspecified {
            try visitor.visitSingularEnumField(value: direction, fieldNumber: 2)
        }
        try unknownFields.traverse(visitor: &visitor)
    }

    static func == (lhs: Stream_Video_Coordinator_UtilsV1_Sort, rhs: Stream_Video_Coordinator_UtilsV1_Sort) -> Bool {
        if lhs.field != rhs.field { return false }
        if lhs.direction != rhs.direction { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}
