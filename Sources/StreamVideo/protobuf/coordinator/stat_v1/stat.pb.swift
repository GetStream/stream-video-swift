//
// Copyright Â© 2023 Stream.io Inc. All rights reserved.
//

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
private struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
    struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
    typealias Version = _2
}

enum Stream_Video_Coordinator_StatV1_MediaType: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case unspecified // = 0
    case audio // = 1
    case video // = 2
    case screenShare // = 3
    case UNRECOGNIZED(Int)

    init() {
        self = .unspecified
    }

    init?(rawValue: Int) {
        switch rawValue {
        case 0: self = .unspecified
        case 1: self = .audio
        case 2: self = .video
        case 3: self = .screenShare
        default: self = .UNRECOGNIZED(rawValue)
        }
    }

    var rawValue: Int {
        switch self {
        case .unspecified: return 0
        case .audio: return 1
        case .video: return 2
        case .screenShare: return 3
        case let .UNRECOGNIZED(i): return i
        }
    }
}

#if swift(>=4.2)

extension Stream_Video_Coordinator_StatV1_MediaType: CaseIterable {
    // The compiler won't synthesize support with the UNRECOGNIZED case.
    static var allCases: [Stream_Video_Coordinator_StatV1_MediaType] = [
        .unspecified,
        .audio,
        .video,
        .screenShare
    ]
}

#endif // swift(>=4.2)

enum Stream_Video_Coordinator_StatV1_MediaStateChange: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case unspecified // = 0
    case started // = 1
    case ended // = 2
    case UNRECOGNIZED(Int)

    init() {
        self = .unspecified
    }

    init?(rawValue: Int) {
        switch rawValue {
        case 0: self = .unspecified
        case 1: self = .started
        case 2: self = .ended
        default: self = .UNRECOGNIZED(rawValue)
        }
    }

    var rawValue: Int {
        switch self {
        case .unspecified: return 0
        case .started: return 1
        case .ended: return 2
        case let .UNRECOGNIZED(i): return i
        }
    }
}

#if swift(>=4.2)

extension Stream_Video_Coordinator_StatV1_MediaStateChange: CaseIterable {
    // The compiler won't synthesize support with the UNRECOGNIZED case.
    static var allCases: [Stream_Video_Coordinator_StatV1_MediaStateChange] = [
        .unspecified,
        .started,
        .ended
    ]
}

#endif // swift(>=4.2)

enum Stream_Video_Coordinator_StatV1_MediaDirection: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case unspecified // = 0
    case send // = 1
    case receive // = 2
    case UNRECOGNIZED(Int)

    init() {
        self = .unspecified
    }

    init?(rawValue: Int) {
        switch rawValue {
        case 0: self = .unspecified
        case 1: self = .send
        case 2: self = .receive
        default: self = .UNRECOGNIZED(rawValue)
        }
    }

    var rawValue: Int {
        switch self {
        case .unspecified: return 0
        case .send: return 1
        case .receive: return 2
        case let .UNRECOGNIZED(i): return i
        }
    }
}

#if swift(>=4.2)

extension Stream_Video_Coordinator_StatV1_MediaDirection: CaseIterable {
    // The compiler won't synthesize support with the UNRECOGNIZED case.
    static var allCases: [Stream_Video_Coordinator_StatV1_MediaDirection] = [
        .unspecified,
        .send,
        .receive
    ]
}

#endif // swift(>=4.2)

enum Stream_Video_Coordinator_StatV1_MediaStateChangeReason: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case unspecified // = 0
    case mute // = 1
    case connection // = 2
    case UNRECOGNIZED(Int)

    init() {
        self = .unspecified
    }

    init?(rawValue: Int) {
        switch rawValue {
        case 0: self = .unspecified
        case 1: self = .mute
        case 2: self = .connection
        default: self = .UNRECOGNIZED(rawValue)
        }
    }

    var rawValue: Int {
        switch self {
        case .unspecified: return 0
        case .mute: return 1
        case .connection: return 2
        case let .UNRECOGNIZED(i): return i
        }
    }
}

#if swift(>=4.2)

extension Stream_Video_Coordinator_StatV1_MediaStateChangeReason: CaseIterable {
    // The compiler won't synthesize support with the UNRECOGNIZED case.
    static var allCases: [Stream_Video_Coordinator_StatV1_MediaStateChangeReason] = [
        .unspecified,
        .mute,
        .connection
    ]
}

#endif // swift(>=4.2)

/// ParticipantConnected is fired when a user joins a call
struct Stream_Video_Coordinator_StatV1_ParticipantConnected {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
}

/// ParticipantDisconnected is fired when a user leaves a call
struct Stream_Video_Coordinator_StatV1_ParticipantDisconnected {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
}

/// The participant experienced a significant amount of audio/video freeze when observing a given peer
struct Stream_Video_Coordinator_StatV1_Freeze {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var mediaType: Stream_Video_Coordinator_StatV1_MediaType = .unspecified

    /// Sender of the media stream
    var peerID: String = String()

    var duration: SwiftProtobuf.Google_Protobuf_Duration {
        get { _duration ?? SwiftProtobuf.Google_Protobuf_Duration() }
        set { _duration = newValue }
    }

    /// Returns true if `duration` has been explicitly set.
    var hasDuration: Bool { self._duration != nil }
    /// Clears the value of `duration`. Subsequent reads from it will return its default value.
    mutating func clearDuration() { _duration = nil }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _duration: SwiftProtobuf.Google_Protobuf_Duration?
}

/// A participant started/ended sending/receiving audio/video for a given reason
struct Stream_Video_Coordinator_StatV1_MediaStateChanged {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var mediaType: Stream_Video_Coordinator_StatV1_MediaType = .unspecified

    var change: Stream_Video_Coordinator_StatV1_MediaStateChange = .unspecified

    var direction: Stream_Video_Coordinator_StatV1_MediaDirection = .unspecified

    var reason: Stream_Video_Coordinator_StatV1_MediaStateChangeReason = .unspecified

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
}

/// A stat event from the perspective of a particular participant
struct Stream_Video_Coordinator_StatV1_TimelineEvent {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Event timestamp as RFC3339 string.
    var timestamp: SwiftProtobuf.Google_Protobuf_Timestamp {
        get { _timestamp ?? SwiftProtobuf.Google_Protobuf_Timestamp() }
        set { _timestamp = newValue }
    }

    /// Returns true if `timestamp` has been explicitly set.
    var hasTimestamp: Bool { self._timestamp != nil }
    /// Clears the value of `timestamp`. Subsequent reads from it will return its default value.
    mutating func clearTimestamp() { _timestamp = nil }

    var event: Stream_Video_Coordinator_StatV1_TimelineEvent.OneOf_Event?

    var participantConnected: Stream_Video_Coordinator_StatV1_ParticipantConnected {
        get {
            if case let .participantConnected(v)? = event { return v }
            return Stream_Video_Coordinator_StatV1_ParticipantConnected()
        }
        set { event = .participantConnected(newValue) }
    }

    var participantDisconnected: Stream_Video_Coordinator_StatV1_ParticipantDisconnected {
        get {
            if case let .participantDisconnected(v)? = event { return v }
            return Stream_Video_Coordinator_StatV1_ParticipantDisconnected()
        }
        set { event = .participantDisconnected(newValue) }
    }

    var mediaStateChanged: Stream_Video_Coordinator_StatV1_MediaStateChanged {
        get {
            if case let .mediaStateChanged(v)? = event { return v }
            return Stream_Video_Coordinator_StatV1_MediaStateChanged()
        }
        set { event = .mediaStateChanged(newValue) }
    }

    var freeze: Stream_Video_Coordinator_StatV1_Freeze {
        get {
            if case let .freeze(v)? = event { return v }
            return Stream_Video_Coordinator_StatV1_Freeze()
        }
        set { event = .freeze(newValue) }
    }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    enum OneOf_Event: Equatable {
        case participantConnected(Stream_Video_Coordinator_StatV1_ParticipantConnected)
        case participantDisconnected(Stream_Video_Coordinator_StatV1_ParticipantDisconnected)
        case mediaStateChanged(Stream_Video_Coordinator_StatV1_MediaStateChanged)
        case freeze(Stream_Video_Coordinator_StatV1_Freeze)

        #if !swift(>=4.1)
        static func == (
            lhs: Stream_Video_Coordinator_StatV1_TimelineEvent.OneOf_Event,
            rhs: Stream_Video_Coordinator_StatV1_TimelineEvent.OneOf_Event
        ) -> Bool {
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every case branch when no optimizations are
            // enabled. https://github.com/apple/swift-protobuf/issues/1034
            switch (lhs, rhs) {
            case (.participantConnected, .participantConnected): return {
                    guard case let .participantConnected(l) = lhs,
                          case let .participantConnected(r) = rhs else { preconditionFailure() }
                    return l == r
                }()
            case (.participantDisconnected, .participantDisconnected): return {
                    guard case let .participantDisconnected(l) = lhs,
                          case let .participantDisconnected(r) = rhs else { preconditionFailure() }
                    return l == r
                }()
            case (.mediaStateChanged, .mediaStateChanged): return {
                    guard case let .mediaStateChanged(l) = lhs, case let .mediaStateChanged(r) = rhs else { preconditionFailure() }
                    return l == r
                }()
            case (.freeze, .freeze): return {
                    guard case let .freeze(l) = lhs, case let .freeze(r) = rhs else { preconditionFailure() }
                    return l == r
                }()
            default: return false
            }
        }
        #endif
    }

    init() {}

    private var _timestamp: SwiftProtobuf.Google_Protobuf_Timestamp?
}

struct Stream_Video_Coordinator_StatV1_CallParticipantTimeline {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// The events in this timeline are from the perspective of the user with this ID
    var userID: String = String()

    /// time when participant joined
    var start: SwiftProtobuf.Google_Protobuf_Timestamp {
        get { _start ?? SwiftProtobuf.Google_Protobuf_Timestamp() }
        set { _start = newValue }
    }

    /// Returns true if `start` has been explicitly set.
    var hasStart: Bool { self._start != nil }
    /// Clears the value of `start`. Subsequent reads from it will return its default value.
    mutating func clearStart() { _start = nil }

    /// time when participant left
    var end: SwiftProtobuf.Google_Protobuf_Timestamp {
        get { _end ?? SwiftProtobuf.Google_Protobuf_Timestamp() }
        set { _end = newValue }
    }

    /// Returns true if `end` has been explicitly set.
    var hasEnd: Bool { self._end != nil }
    /// Clears the value of `end`. Subsequent reads from it will return its default value.
    mutating func clearEnd() { _end = nil }

    var events: [Stream_Video_Coordinator_StatV1_TimelineEvent] = []

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _start: SwiftProtobuf.Google_Protobuf_Timestamp?
    fileprivate var _end: SwiftProtobuf.Google_Protobuf_Timestamp?
}

struct Stream_Video_Coordinator_StatV1_Session {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var sessionID: String = String()

    var callID: String = String()

    var callType: String = String()

    /// time when first participant joined
    var start: SwiftProtobuf.Google_Protobuf_Timestamp {
        get { _start ?? SwiftProtobuf.Google_Protobuf_Timestamp() }
        set { _start = newValue }
    }

    /// Returns true if `start` has been explicitly set.
    var hasStart: Bool { self._start != nil }
    /// Clears the value of `start`. Subsequent reads from it will return its default value.
    mutating func clearStart() { _start = nil }

    /// time when last participant left
    var end: SwiftProtobuf.Google_Protobuf_Timestamp {
        get { _end ?? SwiftProtobuf.Google_Protobuf_Timestamp() }
        set { _end = newValue }
    }

    /// Returns true if `end` has been explicitly set.
    var hasEnd: Bool { self._end != nil }
    /// Clears the value of `end`. Subsequent reads from it will return its default value.
    mutating func clearEnd() { _end = nil }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _start: SwiftProtobuf.Google_Protobuf_Timestamp?
    fileprivate var _end: SwiftProtobuf.Google_Protobuf_Timestamp?
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Stream_Video_Coordinator_StatV1_MediaType: @unchecked Sendable {}
extension Stream_Video_Coordinator_StatV1_MediaStateChange: @unchecked Sendable {}
extension Stream_Video_Coordinator_StatV1_MediaDirection: @unchecked Sendable {}
extension Stream_Video_Coordinator_StatV1_MediaStateChangeReason: @unchecked Sendable {}
extension Stream_Video_Coordinator_StatV1_ParticipantConnected: @unchecked Sendable {}
extension Stream_Video_Coordinator_StatV1_ParticipantDisconnected: @unchecked Sendable {}
extension Stream_Video_Coordinator_StatV1_Freeze: @unchecked Sendable {}
extension Stream_Video_Coordinator_StatV1_MediaStateChanged: @unchecked Sendable {}
extension Stream_Video_Coordinator_StatV1_TimelineEvent: @unchecked Sendable {}
extension Stream_Video_Coordinator_StatV1_TimelineEvent.OneOf_Event: @unchecked Sendable {}
extension Stream_Video_Coordinator_StatV1_CallParticipantTimeline: @unchecked Sendable {}
extension Stream_Video_Coordinator_StatV1_Session: @unchecked Sendable {}
#endif // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

private let _protobuf_package = "stream.video.coordinator.stat_v1"

extension Stream_Video_Coordinator_StatV1_MediaType: SwiftProtobuf._ProtoNameProviding {
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        0: .same(proto: "MEDIA_TYPE_UNSPECIFIED"),
        1: .same(proto: "MEDIA_TYPE_AUDIO"),
        2: .same(proto: "MEDIA_TYPE_VIDEO"),
        3: .same(proto: "MEDIA_TYPE_SCREEN_SHARE")
    ]
}

extension Stream_Video_Coordinator_StatV1_MediaStateChange: SwiftProtobuf._ProtoNameProviding {
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        0: .same(proto: "MEDIA_STATE_CHANGE_UNSPECIFIED"),
        1: .same(proto: "MEDIA_STATE_CHANGE_STARTED"),
        2: .same(proto: "MEDIA_STATE_CHANGE_ENDED")
    ]
}

extension Stream_Video_Coordinator_StatV1_MediaDirection: SwiftProtobuf._ProtoNameProviding {
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        0: .same(proto: "MEDIA_DIRECTION_UNSPECIFIED"),
        1: .same(proto: "MEDIA_DIRECTION_SEND"),
        2: .same(proto: "MEDIA_DIRECTION_RECEIVE")
    ]
}

extension Stream_Video_Coordinator_StatV1_MediaStateChangeReason: SwiftProtobuf._ProtoNameProviding {
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        0: .same(proto: "MEDIA_STATE_CHANGE_REASON_UNSPECIFIED"),
        1: .same(proto: "MEDIA_STATE_CHANGE_REASON_MUTE"),
        2: .same(proto: "MEDIA_STATE_CHANGE_REASON_CONNECTION")
    ]
}

extension Stream_Video_Coordinator_StatV1_ParticipantConnected: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase,
    SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = _protobuf_package + ".ParticipantConnected"
    static let _protobuf_nameMap = SwiftProtobuf._NameMap()

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let _ = try decoder.nextFieldNumber() {}
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        try unknownFields.traverse(visitor: &visitor)
    }

    static func == (
        lhs: Stream_Video_Coordinator_StatV1_ParticipantConnected,
        rhs: Stream_Video_Coordinator_StatV1_ParticipantConnected
    ) -> Bool {
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Stream_Video_Coordinator_StatV1_ParticipantDisconnected: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase,
    SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = _protobuf_package + ".ParticipantDisconnected"
    static let _protobuf_nameMap = SwiftProtobuf._NameMap()

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let _ = try decoder.nextFieldNumber() {}
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        try unknownFields.traverse(visitor: &visitor)
    }

    static func == (
        lhs: Stream_Video_Coordinator_StatV1_ParticipantDisconnected,
        rhs: Stream_Video_Coordinator_StatV1_ParticipantDisconnected
    ) -> Bool {
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Stream_Video_Coordinator_StatV1_Freeze: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase,
    SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = _protobuf_package + ".Freeze"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .standard(proto: "media_type"),
        2: .standard(proto: "peer_id"),
        3: .same(proto: "duration")
    ]

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every case branch when no optimizations are
            // enabled. https://github.com/apple/swift-protobuf/issues/1034
            switch fieldNumber {
            case 1: try { try decoder.decodeSingularEnumField(value: &self.mediaType) }()
            case 2: try { try decoder.decodeSingularStringField(value: &self.peerID) }()
            case 3: try { try decoder.decodeSingularMessageField(value: &self._duration) }()
            default: break
            }
        }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every if/case branch local when no optimizations
        // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
        // https://github.com/apple/swift-protobuf/issues/1182
        if mediaType != .unspecified {
            try visitor.visitSingularEnumField(value: mediaType, fieldNumber: 1)
        }
        if !peerID.isEmpty {
            try visitor.visitSingularStringField(value: peerID, fieldNumber: 2)
        }
        try { if let v = self._duration {
            try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
        } }()
        try unknownFields.traverse(visitor: &visitor)
    }

    static func == (lhs: Stream_Video_Coordinator_StatV1_Freeze, rhs: Stream_Video_Coordinator_StatV1_Freeze) -> Bool {
        if lhs.mediaType != rhs.mediaType { return false }
        if lhs.peerID != rhs.peerID { return false }
        if lhs._duration != rhs._duration { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Stream_Video_Coordinator_StatV1_MediaStateChanged: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase,
    SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = _protobuf_package + ".MediaStateChanged"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .standard(proto: "media_type"),
        2: .same(proto: "change"),
        3: .same(proto: "direction"),
        4: .same(proto: "reason")
    ]

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every case branch when no optimizations are
            // enabled. https://github.com/apple/swift-protobuf/issues/1034
            switch fieldNumber {
            case 1: try { try decoder.decodeSingularEnumField(value: &self.mediaType) }()
            case 2: try { try decoder.decodeSingularEnumField(value: &self.change) }()
            case 3: try { try decoder.decodeSingularEnumField(value: &self.direction) }()
            case 4: try { try decoder.decodeSingularEnumField(value: &self.reason) }()
            default: break
            }
        }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if mediaType != .unspecified {
            try visitor.visitSingularEnumField(value: mediaType, fieldNumber: 1)
        }
        if change != .unspecified {
            try visitor.visitSingularEnumField(value: change, fieldNumber: 2)
        }
        if direction != .unspecified {
            try visitor.visitSingularEnumField(value: direction, fieldNumber: 3)
        }
        if reason != .unspecified {
            try visitor.visitSingularEnumField(value: reason, fieldNumber: 4)
        }
        try unknownFields.traverse(visitor: &visitor)
    }

    static func == (
        lhs: Stream_Video_Coordinator_StatV1_MediaStateChanged,
        rhs: Stream_Video_Coordinator_StatV1_MediaStateChanged
    ) -> Bool {
        if lhs.mediaType != rhs.mediaType { return false }
        if lhs.change != rhs.change { return false }
        if lhs.direction != rhs.direction { return false }
        if lhs.reason != rhs.reason { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Stream_Video_Coordinator_StatV1_TimelineEvent: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase,
    SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = _protobuf_package + ".TimelineEvent"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "timestamp"),
        2: .standard(proto: "participant_connected"),
        3: .standard(proto: "participant_disconnected"),
        4: .standard(proto: "media_state_changed"),
        5: .same(proto: "freeze")
    ]

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every case branch when no optimizations are
            // enabled. https://github.com/apple/swift-protobuf/issues/1034
            switch fieldNumber {
            case 1: try { try decoder.decodeSingularMessageField(value: &self._timestamp) }()
            case 2: try {
                    var v: Stream_Video_Coordinator_StatV1_ParticipantConnected?
                    var hadOneofValue = false
                    if let current = self.event {
                        hadOneofValue = true
                        if case let .participantConnected(m) = current { v = m }
                    }
                    try decoder.decodeSingularMessageField(value: &v)
                    if let v = v {
                        if hadOneofValue { try decoder.handleConflictingOneOf() }
                        self.event = .participantConnected(v)
                    }
                }()
            case 3: try {
                    var v: Stream_Video_Coordinator_StatV1_ParticipantDisconnected?
                    var hadOneofValue = false
                    if let current = self.event {
                        hadOneofValue = true
                        if case let .participantDisconnected(m) = current { v = m }
                    }
                    try decoder.decodeSingularMessageField(value: &v)
                    if let v = v {
                        if hadOneofValue { try decoder.handleConflictingOneOf() }
                        self.event = .participantDisconnected(v)
                    }
                }()
            case 4: try {
                    var v: Stream_Video_Coordinator_StatV1_MediaStateChanged?
                    var hadOneofValue = false
                    if let current = self.event {
                        hadOneofValue = true
                        if case let .mediaStateChanged(m) = current { v = m }
                    }
                    try decoder.decodeSingularMessageField(value: &v)
                    if let v = v {
                        if hadOneofValue { try decoder.handleConflictingOneOf() }
                        self.event = .mediaStateChanged(v)
                    }
                }()
            case 5: try {
                    var v: Stream_Video_Coordinator_StatV1_Freeze?
                    var hadOneofValue = false
                    if let current = self.event {
                        hadOneofValue = true
                        if case let .freeze(m) = current { v = m }
                    }
                    try decoder.decodeSingularMessageField(value: &v)
                    if let v = v {
                        if hadOneofValue { try decoder.handleConflictingOneOf() }
                        self.event = .freeze(v)
                    }
                }()
            default: break
            }
        }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every if/case branch local when no optimizations
        // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
        // https://github.com/apple/swift-protobuf/issues/1182
        try { if let v = self._timestamp {
            try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
        } }()
        switch event {
        case .participantConnected?: try {
                guard case let .participantConnected(v)? = self.event else { preconditionFailure() }
                try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
            }()
        case .participantDisconnected?: try {
                guard case let .participantDisconnected(v)? = self.event else { preconditionFailure() }
                try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
            }()
        case .mediaStateChanged?: try {
                guard case let .mediaStateChanged(v)? = self.event else { preconditionFailure() }
                try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
            }()
        case .freeze?: try {
                guard case let .freeze(v)? = self.event else { preconditionFailure() }
                try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
            }()
        case nil: break
        }
        try unknownFields.traverse(visitor: &visitor)
    }

    static func == (
        lhs: Stream_Video_Coordinator_StatV1_TimelineEvent,
        rhs: Stream_Video_Coordinator_StatV1_TimelineEvent
    ) -> Bool {
        if lhs._timestamp != rhs._timestamp { return false }
        if lhs.event != rhs.event { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Stream_Video_Coordinator_StatV1_CallParticipantTimeline: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase,
    SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = _protobuf_package + ".CallParticipantTimeline"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .standard(proto: "user_id"),
        2: .same(proto: "start"),
        3: .same(proto: "end"),
        4: .same(proto: "events")
    ]

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every case branch when no optimizations are
            // enabled. https://github.com/apple/swift-protobuf/issues/1034
            switch fieldNumber {
            case 1: try { try decoder.decodeSingularStringField(value: &self.userID) }()
            case 2: try { try decoder.decodeSingularMessageField(value: &self._start) }()
            case 3: try { try decoder.decodeSingularMessageField(value: &self._end) }()
            case 4: try { try decoder.decodeRepeatedMessageField(value: &self.events) }()
            default: break
            }
        }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every if/case branch local when no optimizations
        // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
        // https://github.com/apple/swift-protobuf/issues/1182
        if !userID.isEmpty {
            try visitor.visitSingularStringField(value: userID, fieldNumber: 1)
        }
        try { if let v = self._start {
            try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
        } }()
        try { if let v = self._end {
            try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
        } }()
        if !events.isEmpty {
            try visitor.visitRepeatedMessageField(value: events, fieldNumber: 4)
        }
        try unknownFields.traverse(visitor: &visitor)
    }

    static func == (
        lhs: Stream_Video_Coordinator_StatV1_CallParticipantTimeline,
        rhs: Stream_Video_Coordinator_StatV1_CallParticipantTimeline
    ) -> Bool {
        if lhs.userID != rhs.userID { return false }
        if lhs._start != rhs._start { return false }
        if lhs._end != rhs._end { return false }
        if lhs.events != rhs.events { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Stream_Video_Coordinator_StatV1_Session: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase,
    SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = _protobuf_package + ".Session"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .standard(proto: "session_id"),
        2: .standard(proto: "call_id"),
        3: .standard(proto: "call_type"),
        4: .same(proto: "start"),
        5: .same(proto: "end")
    ]

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every case branch when no optimizations are
            // enabled. https://github.com/apple/swift-protobuf/issues/1034
            switch fieldNumber {
            case 1: try { try decoder.decodeSingularStringField(value: &self.sessionID) }()
            case 2: try { try decoder.decodeSingularStringField(value: &self.callID) }()
            case 3: try { try decoder.decodeSingularStringField(value: &self.callType) }()
            case 4: try { try decoder.decodeSingularMessageField(value: &self._start) }()
            case 5: try { try decoder.decodeSingularMessageField(value: &self._end) }()
            default: break
            }
        }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every if/case branch local when no optimizations
        // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
        // https://github.com/apple/swift-protobuf/issues/1182
        if !sessionID.isEmpty {
            try visitor.visitSingularStringField(value: sessionID, fieldNumber: 1)
        }
        if !callID.isEmpty {
            try visitor.visitSingularStringField(value: callID, fieldNumber: 2)
        }
        if !callType.isEmpty {
            try visitor.visitSingularStringField(value: callType, fieldNumber: 3)
        }
        try { if let v = self._start {
            try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
        } }()
        try { if let v = self._end {
            try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
        } }()
        try unknownFields.traverse(visitor: &visitor)
    }

    static func == (lhs: Stream_Video_Coordinator_StatV1_Session, rhs: Stream_Video_Coordinator_StatV1_Session) -> Bool {
        if lhs.sessionID != rhs.sessionID { return false }
        if lhs.callID != rhs.callID { return false }
        if lhs.callType != rhs.callType { return false }
        if lhs._start != rhs._start { return false }
        if lhs._end != rhs._end { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}
