//
// Copyright Â© 2023 Stream.io Inc. All rights reserved.
//

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
private struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
    struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
    typealias Version = _2
}

struct Stream_Video_Coordinator_UserV1_User {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var id: String = String()

    var teams: [String] = []

    var role: String = String()

    var customJson: Data = Data()

    var name: String = String()

    var imageURL: String = String()

    /// User creation date
    var createdAt: SwiftProtobuf.Google_Protobuf_Timestamp {
        get { _createdAt ?? SwiftProtobuf.Google_Protobuf_Timestamp() }
        set { _createdAt = newValue }
    }

    /// Returns true if `createdAt` has been explicitly set.
    var hasCreatedAt: Bool { self._createdAt != nil }
    /// Clears the value of `createdAt`. Subsequent reads from it will return its default value.
    mutating func clearCreatedAt() { _createdAt = nil }

    /// User last update date.
    var updatedAt: SwiftProtobuf.Google_Protobuf_Timestamp {
        get { _updatedAt ?? SwiftProtobuf.Google_Protobuf_Timestamp() }
        set { _updatedAt = newValue }
    }

    /// Returns true if `updatedAt` has been explicitly set.
    var hasUpdatedAt: Bool { self._updatedAt != nil }
    /// Clears the value of `updatedAt`. Subsequent reads from it will return its default value.
    mutating func clearUpdatedAt() { _updatedAt = nil }

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    private var _createdAt: SwiftProtobuf.Google_Protobuf_Timestamp?
    private var _updatedAt: SwiftProtobuf.Google_Protobuf_Timestamp?
}

/// A message that is used in User requests to create and modify user data
struct Stream_Video_Coordinator_UserV1_UserInput {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// A unique ID for the user
    var id: String = String()

    /// A human-readable name of the user
    var name: String = String()

    /// User role, as defined by permission settings
    var role: String = String()

    /// List of user teams for multi-tenant applications
    var teams: [String] = []

    /// A URL that points to a user image
    var imageURL: String = String()

    /// A JSON object with custom user information
    var customJson: Data = Data()

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Stream_Video_Coordinator_UserV1_User: @unchecked Sendable {}
extension Stream_Video_Coordinator_UserV1_UserInput: @unchecked Sendable {}
#endif // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

private let _protobuf_package = "stream.video.coordinator.user_v1"

extension Stream_Video_Coordinator_UserV1_User: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase,
    SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = _protobuf_package + ".User"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "id"),
        2: .same(proto: "teams"),
        3: .same(proto: "role"),
        4: .standard(proto: "custom_json"),
        5: .same(proto: "name"),
        6: .standard(proto: "image_url"),
        7: .standard(proto: "created_at"),
        8: .standard(proto: "updated_at")
    ]

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every case branch when no optimizations are
            // enabled. https://github.com/apple/swift-protobuf/issues/1034
            switch fieldNumber {
            case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
            case 2: try { try decoder.decodeRepeatedStringField(value: &self.teams) }()
            case 3: try { try decoder.decodeSingularStringField(value: &self.role) }()
            case 4: try { try decoder.decodeSingularBytesField(value: &self.customJson) }()
            case 5: try { try decoder.decodeSingularStringField(value: &self.name) }()
            case 6: try { try decoder.decodeSingularStringField(value: &self.imageURL) }()
            case 7: try { try decoder.decodeSingularMessageField(value: &self._createdAt) }()
            case 8: try { try decoder.decodeSingularMessageField(value: &self._updatedAt) }()
            default: break
            }
        }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every if/case branch local when no optimizations
        // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
        // https://github.com/apple/swift-protobuf/issues/1182
        if !id.isEmpty {
            try visitor.visitSingularStringField(value: id, fieldNumber: 1)
        }
        if !teams.isEmpty {
            try visitor.visitRepeatedStringField(value: teams, fieldNumber: 2)
        }
        if !role.isEmpty {
            try visitor.visitSingularStringField(value: role, fieldNumber: 3)
        }
        if !customJson.isEmpty {
            try visitor.visitSingularBytesField(value: customJson, fieldNumber: 4)
        }
        if !name.isEmpty {
            try visitor.visitSingularStringField(value: name, fieldNumber: 5)
        }
        if !imageURL.isEmpty {
            try visitor.visitSingularStringField(value: imageURL, fieldNumber: 6)
        }
        try { if let v = self._createdAt {
            try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
        } }()
        try { if let v = self._updatedAt {
            try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
        } }()
        try unknownFields.traverse(visitor: &visitor)
    }

    static func == (lhs: Stream_Video_Coordinator_UserV1_User, rhs: Stream_Video_Coordinator_UserV1_User) -> Bool {
        if lhs.id != rhs.id { return false }
        if lhs.teams != rhs.teams { return false }
        if lhs.role != rhs.role { return false }
        if lhs.customJson != rhs.customJson { return false }
        if lhs.name != rhs.name { return false }
        if lhs.imageURL != rhs.imageURL { return false }
        if lhs._createdAt != rhs._createdAt { return false }
        if lhs._updatedAt != rhs._updatedAt { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}

extension Stream_Video_Coordinator_UserV1_UserInput: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase,
    SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = _protobuf_package + ".UserInput"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "id"),
        2: .same(proto: "name"),
        3: .same(proto: "role"),
        4: .same(proto: "teams"),
        5: .standard(proto: "image_url"),
        6: .standard(proto: "custom_json")
    ]

    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every case branch when no optimizations are
            // enabled. https://github.com/apple/swift-protobuf/issues/1034
            switch fieldNumber {
            case 1: try { try decoder.decodeSingularStringField(value: &self.id) }()
            case 2: try { try decoder.decodeSingularStringField(value: &self.name) }()
            case 3: try { try decoder.decodeSingularStringField(value: &self.role) }()
            case 4: try { try decoder.decodeRepeatedStringField(value: &self.teams) }()
            case 5: try { try decoder.decodeSingularStringField(value: &self.imageURL) }()
            case 6: try { try decoder.decodeSingularBytesField(value: &self.customJson) }()
            default: break
            }
        }
    }

    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if !id.isEmpty {
            try visitor.visitSingularStringField(value: id, fieldNumber: 1)
        }
        if !name.isEmpty {
            try visitor.visitSingularStringField(value: name, fieldNumber: 2)
        }
        if !role.isEmpty {
            try visitor.visitSingularStringField(value: role, fieldNumber: 3)
        }
        if !teams.isEmpty {
            try visitor.visitRepeatedStringField(value: teams, fieldNumber: 4)
        }
        if !imageURL.isEmpty {
            try visitor.visitSingularStringField(value: imageURL, fieldNumber: 5)
        }
        if !customJson.isEmpty {
            try visitor.visitSingularBytesField(value: customJson, fieldNumber: 6)
        }
        try unknownFields.traverse(visitor: &visitor)
    }

    static func == (lhs: Stream_Video_Coordinator_UserV1_UserInput, rhs: Stream_Video_Coordinator_UserV1_UserInput) -> Bool {
        if lhs.id != rhs.id { return false }
        if lhs.name != rhs.name { return false }
        if lhs.role != rhs.role { return false }
        if lhs.teams != rhs.teams { return false }
        if lhs.imageURL != rhs.imageURL { return false }
        if lhs.customJson != rhs.customJson { return false }
        if lhs.unknownFields != rhs.unknownFields { return false }
        return true
    }
}
